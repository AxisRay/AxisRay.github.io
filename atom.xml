<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray of Hope</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.raycn.pub/"/>
  <updated>2020-08-16T13:54:48.783Z</updated>
  <id>http://blog.raycn.pub/</id>
  
  <author>
    <name>Ray Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git如何合入上游仓库的分支</title>
    <link href="http://blog.raycn.pub/2020/02/06/git-merge-upstream/"/>
    <id>http://blog.raycn.pub/2020/02/06/git-merge-upstream/</id>
    <published>2020-02-06T12:03:45.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>github上的开源项目有时无法完全满足自己需要，或者项目本身存在BUG，但是等不到开发者去修复。这时候我们往往会选择fork，然后自行修改或使用。但是一段时间后，原项目开发者可能会更新项目，追加新的功能或者修复已知BUG。这时，为了避免与上游脱节，我们需要将上游仓库合入到我们fork的仓库中。</p><a id="more"></a><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><p>这里以本blog的主题（theme）为例，我fork了原作者的仓库，并在其基础上做了些个性化的改动，这些改动作者肯定不会合入的。但是近期原作者做了一些更新，加入的新的功能，因此我要将最新的版本合入到我自己的仓库中。详细操作步骤如下：</p><h2 id="将要自己的仓库克隆（clone）到本地"><a href="#将要自己的仓库克隆（clone）到本地" class="headerlink" title="将要自己的仓库克隆（clone）到本地"></a>将要自己的仓库克隆（clone）到本地</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;AxisRay&#x2F;hexo-theme-material-flow.git</span><br></pre></td></tr></table></figure><h2 id="添加要合入的上游仓库"><a href="#添加要合入的上游仓库" class="headerlink" title="添加要合入的上游仓库"></a>添加要合入的上游仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https:&#x2F;&#x2F;github.com&#x2F;stkevintan&#x2F;hexo-theme-material-flow.git</span><br></pre></td></tr></table></figure><h2 id="拉取（pull）上游仓库"><a href="#拉取（pull）上游仓库" class="headerlink" title="拉取（pull）上游仓库"></a>拉取（pull）上游仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure><h2 id="创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支"><a href="#创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支" class="headerlink" title="创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支"></a>创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b upm upstream&#x2F;master</span><br></pre></td></tr></table></figure><h2 id="切换到自己仓库要合入的分支，并将上述新分支合入"><a href="#切换到自己仓库要合入的分支，并将上述新分支合入" class="headerlink" title="切换到自己仓库要合入的分支，并将上述新分支合入"></a>切换到自己仓库要合入的分支，并将上述新分支合入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge upm</span><br></pre></td></tr></table></figure><h2 id="最后将自己仓库更新（push）上去即可"><a href="#最后将自己仓库更新（push）上去即可" class="headerlink" title="最后将自己仓库更新（push）上去即可"></a>最后将自己仓库更新（push）上去即可</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;github上的开源项目有时无法完全满足自己需要，或者项目本身存在BUG，但是等不到开发者去修复。这时候我们往往会选择fork，然后自行修改或使用。但是一段时间后，原项目开发者可能会更新项目，追加新的功能或者修复已知BUG。这时，为了避免与上游脱节，我们需要将上游仓库合入到我们fork的仓库中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.raycn.pub/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.raycn.pub/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>解决jenkins没有权限调用Docker的问题</title>
    <link href="http://blog.raycn.pub/2017/06/17/jenkins-docker-permission-problem/"/>
    <id>http://blog.raycn.pub/2017/06/17/jenkins-docker-permission-problem/</id>
    <published>2017-06-17T14:23:33.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<p>jenkins在构建步骤中调用docker提示如下错误。</p><blockquote><p>dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?</p></blockquote><a id="more"></a><p>明显这是因为权限问题导致，参考<a href="https://stackoverflow.com/questions/40877705/var-run-docker-sock-permission-denied-while-running-docker-within-python-cgi-s" target="_blank" rel="noopener">stackoverflow</a>上的解决方案，将Jenkins用户添加到docker组中，重启docker服务即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G docker <span class="variable">$username</span></span><br></pre></td></tr></table></figure><p>但是或许是由于docker或者系统版本比较老，没有所谓的docker组，只有dockerroot组。将jenkins添加到dockerroot组后仍然提示权限不足。直接让jenkins以root身份运行也不安全，于是考虑使用sudo曲线救国。  </p><ul><li>编辑sudoers文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure></li><li>添加命令别名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Docker</span><br><span class="line">Cmnd_Alias DOCKER &#x3D; &#x2F;usr&#x2F;bin&#x2F;docker</span><br></pre></td></tr></table></figure></li><li>给jenkins以sudo权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins ALL=(ALL)       NOPASSWD:DOCKER</span><br></pre></td></tr></table></figure></li><li>:wq保存退出，调整jenkins构建步骤，增加sudo  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">16:09:36 Sending build context to Docker daemon   148 kB</span><br><span class="line">16:09:36 Sending build context to Docker daemon </span><br><span class="line">16:09:36 Step 0 : FROM microsoft&#x2F;dotnet</span><br><span class="line">16:09:36  ---&gt; 2c9e30c8fccd</span><br><span class="line">16:09:36 Step 1 : WORKDIR &#x2F;app</span><br><span class="line">16:09:36  ---&gt; Running in 3c50062d5f6d</span><br><span class="line">16:09:40  ---&gt; 3d22684a6579</span><br></pre></td></tr></table></figure>至此问题解决，不过这样还是后有些安全隐患，后续再考虑优化吧。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jenkins在构建步骤中调用docker提示如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
      <category term="docker" scheme="http://blog.raycn.pub/tags/docker/"/>
    
      <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
      <category term="jenkins" scheme="http://blog.raycn.pub/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Bash变量操作实验-变量的测试和内容替换</title>
    <link href="http://blog.raycn.pub/2015/01/29/linux-set-var/"/>
    <id>http://blog.raycn.pub/2015/01/29/linux-set-var/</id>
    <published>2015-01-29T02:15:21.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>某些时候，我们在给变量赋值之前要对<strong>某个</strong>变量进行<strong>判断</strong>,根据结果来决定我们下一步的赋值操作，下面演示下几种判断的方式。</p><a id="more"></a><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ var_value=<span class="string">"test"</span></span><br><span class="line">$ var_empty=<span class="string">""</span></span><br><span class="line">$ <span class="built_in">unset</span> var_null</span><br><span class="line">$ result=<span class="string">"hello"</span></span><br></pre></td></tr></table></figure><p>先创建4个变量（实际上是3个，因为var_null不存在）。<br>var_value值为test<br>var_empty值为空字符<br>var_null不存在，用unset确保它不存在<br>result用来保存结果，先赋个初值hello</p><!-- more --><h2 id="实验1、“-”操作符"><a href="#实验1、“-”操作符" class="headerlink" title="实验1、“-”操作符"></a>实验1、“-”操作符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_null-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br></pre></td></tr></table></figure><p>因为$var_value存在，所以$result的值被替换成$var_value的值，即test<br>虽然$var_value为空字符，但也视为变量存在，因此$result的值被替换为$var_empty的值，即空字符<br>因为$var_null不存在，所以$result的值被替换为默认值default</p><p>要把空字符也视为变量不存在，则需要”:”操作符</p><blockquote><p><strong>Tips</strong><br>需要注意的是，绝大多数情况下，Bash并不区分空变量和空字符变量,但是此处会做区分。而“：”操作符会取消他们之间的差异。<br><a href="http://stackoverflow.com/questions/12262696/using-unset-vs-setting-a-variable-to-empty" target="_blank" rel="noopener"><strong>详情可点击这里查看</strong></a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br></pre></td></tr></table></figure><h2 id="实验2、“-”操作符"><a href="#实验2、“-”操作符" class="headerlink" title="实验2、“+”操作符"></a>实验2、“+”操作符</h2><p>“+”基本上和“-”是完全相反的，而“：”则会和刚才一样把空字符变量和空变量一视同仁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br><span class="line">$ result=<span class="variable">$&#123;var_null+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br></pre></td></tr></table></figure><h2 id="实验3、“-”操作符"><a href="#实验3、“-”操作符" class="headerlink" title="实验3、“=”操作符"></a>实验3、“=”操作符</h2><p>“=”操作符的规则基本和“-”一致，但是替换时会把两个变量一同替换。而“：”操作符会把空字符变量和空变量一视同仁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value=default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var_value</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty=default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var_value</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_null=default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var_null</span></span><br><span class="line">default</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br></pre></td></tr></table></figure><h2 id="实验4、“-”操作符"><a href="#实验4、“-”操作符" class="headerlink" title="实验4、“?”操作符"></a>实验4、“?”操作符</h2><p>“?”操作符与“-”的差异是，当被检查的变量为空时，会将默认字符送入标准错误流，而不是赋值给变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value?default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty?default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_null?default&#125;</span></span><br><span class="line">bash: var_null: default</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:?default&#125;</span></span><br><span class="line">bash: var_null: default</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;某些时候，我们在给变量赋值之前要对&lt;strong&gt;某个&lt;/strong&gt;变量进行&lt;strong&gt;判断&lt;/strong&gt;,根据结果来决定我们下一步的赋值操作，下面演示下几种判断的方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.raycn.pub/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
      <category term="bash" scheme="http://blog.raycn.pub/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>tmux使用笔记</title>
    <link href="http://blog.raycn.pub/2015/01/28/tmux-intruduction/"/>
    <id>http://blog.raycn.pub/2015/01/28/tmux-intruduction/</id>
    <published>2015-01-28T04:33:42.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tmux简介"><a href="#tmux简介" class="headerlink" title="tmux简介"></a>tmux简介</h1><p>tmux是<br>一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。tmux采用C/S模型构建，包含以下模块Server，Session，Window，Panel<br><img src="/img/tmux.jpg" alt="tmux"></p><a id="more"></a><h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install tmux</span><br></pre></td></tr></table></figure><p>终端中键入tmux,首先会启动Server,然后就创建一个Session，这个Session会创建一个Window，仅包含一个Panel。</p><p>tmux new -s session<br>tmux new -s session -d #在后台建立会话<br>tmux ls #列出会话<br>tmux attach -t session #进入某个会话</p><ul><li><p>Server 服务器<br>第一次键入tmux启动的时候就开启了一个服务器Server，通过这个服务器甚至可以实现终端共享。</p></li><li><p>Session 会话<br>每使用tmux命令启动，便会建立一个会话Session，一个服务器可以保持多个会话连接，同时我们也可以在多个会话之间切换。</p></li><li><p>Window 窗口<br>一个Session可包含多个窗口Window，每个窗口都以标签的形式显示在Session下面的状态栏里</p></li><li><p>Panel 面板<br>每个窗口可以划分多个Panel，实现分屏显示</p></li></ul><h1 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h1><p>Ctrl+b (C-b) 是激活tmux控制台的默认快捷键，以下的控制命令都要先键入Ctrl+b激活控制台。</p><h2 id="1、系统操作"><a href="#1、系统操作" class="headerlink" title="1、系统操作"></a>1、系统操作</h2><p> <strong>?</strong> 列出所有快捷键；按q返回<br> <strong>d</strong> 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话<br> <strong>D</strong> 选择要脱离的会话；在同时开启了多个会话时使用<br> <strong>s</strong> 选择并切换会话；在同时开启了多个会话时使用<br> <strong>:</strong> 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器<br> <strong>[</strong> 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出<br> <strong>~</strong> 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息<br> <strong>C-z</strong> 挂起当前会话</p><h2 id="2、窗口操作"><a href="#2、窗口操作" class="headerlink" title="2、窗口操作"></a>2、窗口操作</h2><p><strong>c</strong> 创建新窗口<br><strong>&amp;</strong> 关闭当前窗口<br><strong>p</strong> 切换至上一窗口<br><strong>n</strong> 切换至下一窗口<br><strong>l</strong> 在前后两个窗口间互相切换<br><strong>w</strong> 通过窗口列表切换窗口<br><strong>,</strong> 重命名当前窗口；这样便于识别<br><strong>.</strong> 修改当前窗口编号；相当于窗口重新排序<br><strong>f</strong> 在所有窗口中查找指定文本<br><strong>数字</strong> 切换至制定窗口</p><h2 id="3、面板操作"><a href="#3、面板操作" class="headerlink" title="3、面板操作"></a>3、面板操作</h2><p><strong>”</strong> 将当前面板平分为上下两块<br><strong>%</strong> 将当前面板平分为左右两块<br><strong>x</strong> 关闭当前面板<br><strong>!</strong> 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板<br><strong>q</strong> 显示面板编号<br><strong>o</strong> 在当前窗口中选择下一面板<br><strong>{</strong> 向前置换当前面板<br><strong>}</strong> 向后置换当前面板<br><strong>Alt+o</strong> 逆时针旋转当前窗口的面板<br><strong>Alt+方向键</strong> 以5个单元格为单位移动边缘以调整当前面板大小<br><strong>Ctrl+o</strong> 顺时针旋转当前窗口的面板<br><strong>方向键</strong> 移动光标以选择面板<br><strong>Ctrl+方向键</strong> 以1个单元格为单位移动边缘以调整当前面板大小<br><strong>Space</strong> 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tmux简介&quot;&gt;&lt;a href=&quot;#tmux简介&quot; class=&quot;headerlink&quot; title=&quot;tmux简介&quot;&gt;&lt;/a&gt;tmux简介&lt;/h1&gt;&lt;p&gt;tmux是&lt;br&gt;一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。tmux采用C/S模型构建，包含以下模块Server，Session，Window，Panel&lt;br&gt;&lt;img src=&quot;/img/tmux.jpg&quot; alt=&quot;tmux&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
      <category term="tmux" scheme="http://blog.raycn.pub/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下修改Bash的提示符</title>
    <link href="http://blog.raycn.pub/2015/01/27/ubuntu-change-bash-prompt/"/>
    <id>http://blog.raycn.pub/2015/01/27/ubuntu-change-bash-prompt/</id>
    <published>2015-01-27T14:23:33.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<p>Bash的提示符设置保存在$PS1这个变量中，通过echo命令可以查看当前设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ray@Ray-Laptop:~$ <span class="built_in">echo</span> <span class="variable">$PS1</span></span><br><span class="line"><span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h:\w\$</span><br></pre></td></tr></table></figure><a id="more"></a><p>默认的一些特殊符号所代表的含义：<br><strong>\d</strong> ：代表日期，格式为weekday month date，例如：”Mon Aug 1”<br><strong>\H</strong> ：完整的主机名称。例如：我的机器名称为：Ray-Laptop.local，则这个名称就是Ray-Laptop.local<br><strong>\h</strong> ：仅取主机的第一个名字，如上例，则为Ray-Laptop，local则被省略<br><strong>\t</strong> ：显示时间为24小时格式，如：HH：MM：SS<br><strong>\T</strong> ：显示时间为12小时格式<br><strong>\A</strong> ：显示时间为24小时格式：HH：MM<br><strong>\u</strong> ：当前用户的账号名称<br><strong>\v</strong> ：BASH的版本信息<br><strong>\w</strong> ：完整的工作目录名称。家目录会以 ~代替<br><strong>\W</strong> ：利用basename取得工作目录名称，所以只会列出最后一个目录<br><strong>\#</strong> ：下达的第几个命令<br><strong>$</strong> ：提示字符，如果是root时，提示符为：# ，普通用户则为：$</p><p>我们可以通过修改提示符方法解决进入较深目录时，提示符过长的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h:\W\$</span><br></pre></td></tr></table></figure><p>即将原来的\w替换为\W，但是该方法仅在本次会话有效。我们可通过修改用户根目录～下的.bashrc文件，达到长期有效的目的。</p><p>修改前：<br><img src="/img/prompt-too-long.png" alt="prompt-too-long"><br>修改后：<br><img src="/img/prompt-proper.png" alt="prompt-proper"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bash的提示符设置保存在$PS1这个变量中，通过echo命令可以查看当前设置&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ray@Ray-Laptop:~$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$PS1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;debian_chroot:+($debian_chroot)&amp;#125;&lt;/span&gt;\u@\h:\w\$&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
      <category term="bash" scheme="http://blog.raycn.pub/tags/bash/"/>
    
      <category term="prompt" scheme="http://blog.raycn.pub/tags/prompt/"/>
    
  </entry>
  
  <entry>
    <title>linux文件及目录权限笔记</title>
    <link href="http://blog.raycn.pub/2015/01/04/linux-dir-and-file-permission/"/>
    <id>http://blog.raycn.pub/2015/01/04/linux-dir-and-file-permission/</id>
    <published>2015-01-04T06:44:36.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p>权限分三种，读（r）写（w）可执行（x）。“r–”、“rw-”、“rwx”这三种权限组合没什么好说的。“r–”只读，“rw-”可读可写，“rwx”可读可写可执行，下面介绍几种比较另类权限组合。</p><a id="more"></a><h2 id="w-、-wx："><a href="#w-、-wx：" class="headerlink" title="-w-、-wx："></a><strong>-w-、-wx：</strong></h2><p>只写权限，只能写入不能读取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw--w- 1 root root    5 Jan  4 12:00 testfile</span><br><span class="line">/tmp$ cat testfile</span><br><span class="line">cat: testfile: Permission denied</span><br><span class="line">/tmp$ <span class="built_in">echo</span> <span class="string">"write-test"</span>&gt;testfile</span><br><span class="line">/tmp$ su root</span><br><span class="line">Password: </span><br><span class="line">root@axisray:/tmp<span class="comment"># cat testfile </span></span><br><span class="line">write-test</span><br></pre></td></tr></table></figure><h2 id="–x、-wx："><a href="#–x、-wx：" class="headerlink" title="–x、-wx："></a><strong>–x、-wx：</strong></h2><p>虽然有执行权限，但是由于没有读权限，连文件内容都不知道谈何执行呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw---x  1 root root   26 Jan  4 12:53 testfile*</span><br><span class="line">/tmp$ ./testfile </span><br><span class="line">/bin/bash: ./testfile: Permission denied</span><br><span class="line">/tmp$ su root</span><br><span class="line">Password: </span><br><span class="line">root@axisray:/tmp<span class="comment"># chmod o=rx testfile</span></span><br><span class="line">root@axisray:/tmp$ ll | grep testfile</span><br><span class="line">-rw-rw-r-x  1 root root   26 Jan  4 12:53 testfile*</span><br><span class="line">root@axisray:/tmp<span class="comment"># su ray</span></span><br><span class="line">/tmp$ ./testfile </span><br><span class="line">hello!</span><br></pre></td></tr></table></figure><h1 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h1><p>目录权限的关键在于可执行权限（x），下面逐个说明</p><h2 id="r–、rw-、-w-："><a href="#r–、rw-、-w-：" class="headerlink" title="r–、rw-、-w-："></a>r–、rw-、-w-：</h2><p>无可执行<br>drwxr-xr– 4 root root 4096 Jan  4 11:53 test/</p><p>cd命令需要可执行（x）权限，因此无法通过cd命令切换到该目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">bash: <span class="built_in">cd</span>: <span class="built_in">test</span>/: Permission denied</span><br></pre></td></tr></table></figure><p>子目录也是不可切换的，即便对子目录有完整权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ <span class="built_in">cd</span> <span class="built_in">test</span>/<span class="built_in">test</span>-dir1/</span><br><span class="line">bash: <span class="built_in">cd</span>: <span class="built_in">test</span>/<span class="built_in">test</span>-dir1/: Permission denied</span><br></pre></td></tr></table></figure><p>同样对于cat命令，由于缺少可执行（x）权限，该目录下的文件也是不可读的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ cat <span class="built_in">test</span>/<span class="built_in">test</span>-file2</span><br><span class="line">cat: <span class="built_in">test</span>/<span class="built_in">test</span>-file2: Permission denied</span><br></pre></td></tr></table></figure><p>cp命令也是不可以的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ cp <span class="built_in">test</span>/<span class="built_in">test</span>-file2 ./</span><br><span class="line">cp: cannot <span class="built_in">stat</span> ‘<span class="built_in">test</span>/<span class="built_in">test</span>-file2’: Permission denied</span><br></pre></td></tr></table></figure><p>若该目录权限为rw-或-w-即有写入权限，由于缺少可执行（x）权限，也无法用mkdir等命令创建文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ mkdir <span class="built_in">test</span>/testdir</span><br><span class="line">mkdir: cannot create directory ‘<span class="built_in">test</span>/testdir’: Permission denied</span><br><span class="line">/tmp$ cp testfile ./<span class="built_in">test</span>/</span><br><span class="line">cp: cannot <span class="built_in">stat</span> ‘./<span class="built_in">test</span>/testfile’: Permission denied</span><br></pre></td></tr></table></figure><p>同样即使该目录下的文件可读可执行，也无法执行该目录下的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ./<span class="built_in">test</span>/<span class="built_in">test</span>-file2</span><br><span class="line">bash: ./<span class="built_in">test</span>/<span class="built_in">test</span>-file2: Permission denied</span><br></pre></td></tr></table></figure><p>ll命令虽然可以列出该目录下的文件及目录，但是同样因为可执行（x）权限无法查看属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ll <span class="built_in">test</span></span><br><span class="line">ls: cannot access <span class="built_in">test</span>/..: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/.: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/<span class="built_in">test</span>-file2: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/<span class="built_in">test</span>-dir2: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/<span class="built_in">test</span>-dir1: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/<span class="built_in">test</span>-file1: Permission denied</span><br><span class="line">total 0</span><br><span class="line">d????????? ? ? ? ?            ? ./</span><br><span class="line">d????????? ? ? ? ?            ? ../</span><br><span class="line">d????????? ? ? ? ?            ? <span class="built_in">test</span>-dir1/</span><br><span class="line">d????????? ? ? ? ?            ? <span class="built_in">test</span>-dir2/</span><br><span class="line">-????????? ? ? ? ?            ? <span class="built_in">test</span>-file1</span><br><span class="line">-????????? ? ? ? ?            ? <span class="built_in">test</span>-file2</span><br></pre></td></tr></table></figure><p>对子目录来说，无法列出文件及目录，即便有完整权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ll <span class="built_in">test</span>/<span class="built_in">test</span>-dir1/</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/<span class="built_in">test</span>-dir1/: Permission denied</span><br></pre></td></tr></table></figure><h2 id="–x、-wx、rwx、r-x："><a href="#–x、-wx、rwx、r-x：" class="headerlink" title="–x、-wx、rwx、r-x："></a>–x、-wx、rwx、r-x：</h2><p>有可执行权限<br>drwxr-x–x  4 root root 4096 Jan  4 13:15 test/</p><p>使用cp命令可以正常切换至该目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">/tmp/<span class="built_in">test</span>$</span><br></pre></td></tr></table></figure><p>但是无法使用ll列出该目录下的文件及目录，因为没有读权限（r）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ ll</span><br><span class="line">ls: cannot open directory .: Permission denied</span><br></pre></td></tr></table></figure><p>子目录不受影响，只要有相应权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ ll <span class="built_in">test</span>-dir1</span><br><span class="line">total 12</span><br><span class="line">drwxr-xrwx 2 root root 4096 Jan  4 13:27 ./</span><br><span class="line">drwxr-x--x 4 root root 4096 Jan  4 13:15 ../</span><br><span class="line">-rw-r--r-- 1 root root    9 Jan  4 13:27 <span class="built_in">test</span>-file3</span><br></pre></td></tr></table></figure><p>可使用cat查看目录下的文件，只要有相应文件的读权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ cat <span class="built_in">test</span>-file2</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello!"</span></span><br></pre></td></tr></table></figure><p>也可以使用cp拷贝该目录下的文件，只要有相应文件的读权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ cp <span class="built_in">test</span>-file2 ../</span><br><span class="line">/tmp/<span class="built_in">test</span>$ <span class="built_in">cd</span> ..</span><br><span class="line">/tmp$ ll | grep <span class="built_in">test</span>-file</span><br><span class="line">-rw-r--r-x  1 ray  ray    26 Jan  4 13:43 <span class="built_in">test</span>-file2*</span><br></pre></td></tr></table></figure><p>也可以执行该目录下的文件，只要有相应文件的读和可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ./<span class="built_in">test</span>/<span class="built_in">test</span>-file2</span><br><span class="line">hello!</span><br></pre></td></tr></table></figure><p>如果该目录权限为-wx或rwx即有写入权限<br>我们就可以用mkdir、cp等命令在该目录创建子目录或文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ mkdir <span class="built_in">test</span>/testdir</span><br><span class="line">/tmp$ cp testfile <span class="built_in">test</span>/</span><br><span class="line">/tmp$ su root</span><br><span class="line">Password: </span><br><span class="line">root@axisray:/tmp<span class="comment"># ll test/</span></span><br><span class="line">total 24</span><br><span class="line">drwxrwxr-x 2 ray  ray  4096 Jan  4 14:29 testdir/</span><br><span class="line">drwxr-xrwx 2 root root 4096 Jan  4 13:27 <span class="built_in">test</span>-dir1/</span><br><span class="line">drwxr-xrw- 2 root root 4096 Jan  4 13:15 <span class="built_in">test</span>-dir2/</span><br><span class="line">-rw-rw-r-x 1 ray  ray    26 Jan  4 14:29 testfile*</span><br><span class="line">-rw-r----- 1 root root   11 Jan  4 13:15 <span class="built_in">test</span>-file1</span><br><span class="line">-rw-r--r-x 1 root root   26 Jan  4 13:15 <span class="built_in">test</span>-file2*</span><br></pre></td></tr></table></figure><p>如果该目录权限为r-x或rwx即有读取权限<br>我们可以用ll列出当前目录的子目录及文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@axisray:/tmp<span class="comment"># chmod o=rx test</span></span><br><span class="line">root@axisray:/tmp<span class="comment"># su ray</span></span><br><span class="line">/tmp$ ll <span class="built_in">test</span></span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 5 root root 4096 Jan  4 14:29 ./</span><br><span class="line">drwxrwxrwt 4 root root 4096 Jan  4 14:42 ../</span><br><span class="line">drwxrwxr-x 2 ray  ray  4096 Jan  4 14:29 testdir/</span><br><span class="line">drwxr-xrwx 2 root root 4096 Jan  4 13:27 <span class="built_in">test</span>-dir1/</span><br><span class="line">drwxr-xrw- 2 root root 4096 Jan  4 13:15 <span class="built_in">test</span>-dir2/</span><br><span class="line">-rw-rw-r-x 1 ray  ray    26 Jan  4 14:29 testfile*</span><br><span class="line">-rw-r----- 1 root root   11 Jan  4 13:15 <span class="built_in">test</span>-file1</span><br><span class="line">-rw-r--r-x 1 root root   26 Jan  4 13:15 <span class="built_in">test</span>-file2*</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>对于文件权限，<strong>可读权限（r）</strong>是<strong>可执行（x）</strong>的基础</li><li>对于目录权限，可执行（x）权限是关键，没有可执行权限意味着所有命令都不能在该目录及子目录下执行，该目录及子目录下的文件也不能被执行。这意味着我们常用的命令cd、ls、mkdir、cp、mv、rm等等在该目录下全部失效</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文件权限&quot;&gt;&lt;a href=&quot;#文件权限&quot; class=&quot;headerlink&quot; title=&quot;文件权限&quot;&gt;&lt;/a&gt;文件权限&lt;/h1&gt;&lt;p&gt;权限分三种，读（r）写（w）可执行（x）。“r–”、“rw-”、“rwx”这三种权限组合没什么好说的。“r–”只读，“rw-”可读可写，“rwx”可读可写可执行，下面介绍几种比较另类权限组合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
      <category term="bash" scheme="http://blog.raycn.pub/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>解决TortoiseSVN/Git覆盖图标失效的问题</title>
    <link href="http://blog.raycn.pub/2014/12/09/tortoise-icon-problem/"/>
    <id>http://blog.raycn.pub/2014/12/09/tortoise-icon-problem/</id>
    <published>2014-12-09T12:38:23.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现TortoiseGit的覆盖图标不见了，从版本库里clone下来的源码没有了已同步，已修改之类的图标提示。下面给出解决办法：（感谢<a href="http://blog.csdn.net/woyaowenzi/article/details/7538053" target="_blank" rel="noopener">woyaowenzi</a>）</p><a id="more"></a><p>Windows最多允许15个覆盖图标，系统占用了约4个，用户可用的只有11个左右。<br>TortoiseSVN或者TortoiseGit标准会占用7个覆盖图标，分别为：<br><em>普通图标、已修改图标、冲突指示图标、已删除图标、新增文件图标、忽略图标、未版本化图标</em><br>而每个网盘类的客户端又会占用3个左右。<br><img src="/img/tortoise-icon.gif" alt="tortoise-icon"><br>所有应用程序的覆盖图标都需要在注册表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers</span><br></pre></td></tr></table></figure><p>下面增加一个项目，当需要显示覆盖图标时，Windows会按照项目名称的字母顺利依次查询在这些项目里所指示的接口，以检测是否有覆盖图标，<em>当检测到11个有效的接口后，Windows就会自动停止继续向下检测，这样，后来的覆盖图标就不会显示了。</em></p><p><strong>解决方法</strong>：把其他网盘类的覆盖图标注册表项删除，让TortoiseSVN/Git的注册表项提前</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现TortoiseGit的覆盖图标不见了，从版本库里clone下来的源码没有了已同步，已修改之类的图标提示。下面给出解决办法：（感谢&lt;a href=&quot;http://blog.csdn.net/woyaowenzi/article/details/7538053&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;woyaowenzi&lt;/a&gt;）&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://blog.raycn.pub/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.raycn.pub/tags/git/"/>
    
      <category term="tortoise" scheme="http://blog.raycn.pub/tags/tortoise/"/>
    
  </entry>
  
  <entry>
    <title>解决ubuntu下phpmyadmin缺少mcrypt扩展的错误</title>
    <link href="http://blog.raycn.pub/2014/12/06/php-mod-mcrypt/"/>
    <id>http://blog.raycn.pub/2014/12/06/php-mod-mcrypt/</id>
    <published>2014-12-06T13:08:46.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu用apt-get安装phpmyadmin后，总会出现如下错误<br><img src="/img/php-mcrypt.gif" alt="php-mod-mcrypt"><br>解决方法很简单，使用如下命令启用mcrypt组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php5enmod mcrypt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在ubuntu用apt-get安装phpmyadmin后，总会出现如下错误&lt;br&gt;&lt;img src=&quot;/img/php-mcrypt.gif&quot; alt=&quot;php-mod-mcrypt&quot;&gt;&lt;br&gt;解决方法很简单，使用如下命令启用mcrypt组件&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
      <category term="ubuntu" scheme="http://blog.raycn.pub/tags/ubuntu/"/>
    
      <category term="phpmyadmin" scheme="http://blog.raycn.pub/tags/phpmyadmin/"/>
    
  </entry>
  
  <entry>
    <title>从光盘或镜像中安装.NetFramework</title>
    <link href="http://blog.raycn.pub/2014/12/05/install-netfx3-from-sysimg/"/>
    <id>http://blog.raycn.pub/2014/12/05/install-netfx3-from-sysimg/</id>
    <published>2014-12-05T03:55:12.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<p>windows8预装了.Net Framework4.0，但是4.0并不会向下兼容使用更早.Net版本编写的程序。当我们运行一个使用更早版本编写的.Net程序时，Windows会自动帮我们下载并安装.Net Framework3.5。但是当遇到没有网络或者网速比较慢的时候就比较难受了。所以我们可以选择从Windows8光盘或者镜像安装.<br>假设光盘或光盘镜像的盘符为X，在命令提示符中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISM &#x2F;Online &#x2F;Enable-Feature &#x2F;FeatureName:NetFx3 &#x2F;All &#x2F;LimitAccess &#x2F;Source:X:\sources\sxs</span><br></pre></td></tr></table></figure><p><img src="/img/NetFx3.gif" alt="NetFx3"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;windows8预装了.Net Framework4.0，但是4.0并不会向下兼容使用更早.Net版本编写的程序。当我们运行一个使用更早版本编写的.Net程序时，Windows会自动帮我们下载并安装.Net Framework3.5。但是当遇到没有网络或者网速比较慢的时候就
      
    
    </summary>
    
    
      <category term="windows" scheme="http://blog.raycn.pub/categories/windows/"/>
    
    
      <category term="dotnet" scheme="http://blog.raycn.pub/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>在openwrt中利用ipset将特定流量转发到shadowsocks</title>
    <link href="http://blog.raycn.pub/2014/12/01/openwrt-ipset-redirect-shadowsocks/"/>
    <id>http://blog.raycn.pub/2014/12/01/openwrt-ipset-redirect-shadowsocks/</id>
    <published>2014-12-01T14:43:23.000Z</published>
    <updated>2020-08-16T13:54:48.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、<strong>前言</strong></h1><p>虽然<em>Chrome</em>里的<em>SwitchySharp</em>插件可以根据规则自动转发特定流量到<em>Shadowsocks</em>，但是这种方式局限性还是很大。[北落师门][1]的博文中提供了一种在路由上自动转发特定流量的方法，使得转发过程对于客户端是透明的。我参考他的方法，做了一些改进。</p><blockquote><ul><li>使用gfwlist扩大适用网站范围</li><li>使用ss-tunnel解决DNS污染</li></ul></blockquote><p> 大致过程如下</p><blockquote><ul><li>dnsmasq将指定列表中的域名通过ss-tunnel发往未被污染的DNS进行解析，并将结果保存到ipset中</li><li>在iptable中建立规则，将ipset中的IP的TCP流量重定向到ss-redir透明代理</li></ul></blockquote><a id="more"></a><h1 id="二、配置Shadowsocks客户端"><a href="#二、配置Shadowsocks客户端" class="headerlink" title="二、配置Shadowsocks客户端"></a>二、<strong>配置Shadowsocks客户端</strong></h1><p>我使用的是shadowsocks-libev（包含 ss-{redir,local,tunnel} 三个可执行文件）</p><blockquote><p><a href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/1.5.3-5cc562f/ar71xx/" target="_blank" rel="noopener">shadowsocks-libev_1.5.3-1_ar71xx.ipk</a></p></blockquote><p>其他版本可以去sourceforge的<a href="http://sourceforge.net/projects/openwrt-dist/files/shadowsocks-libev/1.5.3-5cc562f/ar71xx/shadowsocks-libev-spec_1.5.3-1_ar71xx.ipk/download" target="_blank" rel="noopener">openwrt-dist</a>下载.<br>  [1]: <a href="http://hong.im/2014/07/08/use-ipset-with-shadowsocks-on-openwrt/" target="_blank" rel="noopener">http://hong.im/2014/07/08/use-ipset-with-shadowsocks-on-openwrt/</a> “使用ipset让openwrt上的shadowsocks更智能的重定向流量-北落师门”<br>  用WinSCP上传到路由器，或者用wget命令直接在路由上下载。然后用opkg安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ opkg install shadowsocks-libev*.ipk</span><br></pre></td></tr></table></figure><p> 安装完成后编辑shadowsocks的配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p> 请按实际情况自行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;198.199.101.201&quot;,</span><br><span class="line">&quot;server_port&quot;:10086,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;password&quot;:&quot;fuckgfw&quot;,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后让shadowsocks自动启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/shadowsocks <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><p>修改shadowsocks的启动配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/init.d/shadowsocks</span><br></pre></td></tr></table></figure><p>修改成如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh /etc/rc.common</span></span><br><span class="line"></span><br><span class="line">START=95</span><br><span class="line"></span><br><span class="line">SERVICE_USE_PID=1</span><br><span class="line">SERVICE_WRITE_PID=1</span><br><span class="line">SERVICE_DAEMONIZE=1</span><br><span class="line"></span><br><span class="line">CONFIG=/etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line"><span class="comment"># Client Mode</span></span><br><span class="line"><span class="comment">#service_start /usr/bin/ss-local -c $CONFIG</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Proxy Mode</span></span><br><span class="line">service_start /usr/bin/ss-redir -c <span class="variable">$CONFIG</span></span><br><span class="line">service_start /usr/bin/ss-tunnel -c <span class="variable">$CONFIG</span> -l 5353 -L 8.8.8.8:53 -u</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line"><span class="comment"># Client Mode</span></span><br><span class="line"><span class="comment">#service_stop /usr/bin/ss-local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Proxy Mode</span></span><br><span class="line">service_stop /usr/bin/ss-redir</span><br><span class="line">service_stop /usr/bin/ss-tunnel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，shadowsocks的客户端配置完成</p><h1 id="三、配置dnsmasq"><a href="#三、配置dnsmasq" class="headerlink" title="三、配置dnsmasq"></a>三、<strong>配置dnsmasq</strong></h1><p> dnsmasq可以将指定列表中的域名通过ss-tunnel发往未被污染的DNS进行解析，并将结果保存到ipset中。但是OpenWrt默认版本的dnsmasq没有ipset功能，同时也没有安装ipset。<br> 不过Openwrt源中提供了完整版本的dnsmasq即dnsmasq-full。因此我们可以执行以下命令卸载精简版并安装完整版本的dnsmasq和ipset。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ opkg update</span><br><span class="line">$ opkg remove dnsmasq</span><br><span class="line">$ opkg install dnsmasq-full</span><br><span class="line">$ opkg install ipset</span><br></pre></td></tr></table></figure><p> 安装ipset的时候可能会报类似下面的错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_bitmap_ip.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_bitmap_ipmac.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_bitmap_port.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_hash_ip.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_hash_ipport.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_hash_ipportip.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_hash_ipportnet.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_hash_net.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_hash_netiface.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_hash_netport.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/ip_set_list_set.ko</span><br><span class="line">kmod: failed to insert /lib/modules/3.10.44/xt_set.ko</span><br></pre></td></tr></table></figure><p>不用担心，因为ipset安装后需要重启才能正常工作，我们暂时先不重启，继续配置。<br>打开dnsmasq的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim  /etc/dnsmasq.conf</span><br></pre></td></tr></table></figure><p>在最后面加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conf-dir=/etc/dnsmasq.d</span><br></pre></td></tr></table></figure><p>在/etc目录下新建一个目录dnsmasq.d</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /etc/dnsmasq.d</span><br></pre></td></tr></table></figure><p>在这个目录下，我们要存放规则文件，将特定域名发往ss-tunnel。我采用的是gfwlist提供的规则，但是需要转换成dnsmasq认可的配置文件。我提供了一份转换好的配置文件，大家可以直接下载到dnsmasq.d目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/dnsmasq.d</span><br><span class="line">$ wget http://axisray.me/share/gfwdomains.conf</span><br></pre></td></tr></table></figure><p>关于这份配置文件需要说明的是，dnsmasq会把列表中的域名发往<strong>127.0.0.1:5353</strong>解析，并将结果保存在名为<strong>gfwipset</strong>的ipset中。如果你配置的ss-tunel和ipset和我不一样的话，就需要手动处理该配置文件，或者根据下面的说明自行生成合适的配置文件。</p><h1 id="四、ipset配置"><a href="#四、ipset配置" class="headerlink" title="四、ipset配置"></a>四、<strong>ipset配置</strong></h1><p>我们需要创建一个ipset，并在iptable中添加一条规则，重定向ipset中ip的流量到shadowsocks(ss-redir在1080端口监听)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipset -N gfwipset iphash</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -m <span class="built_in">set</span> --match-set gfwipset dst -j REDIRECT --to-port 1080</span><br></pre></td></tr></table></figure><p>值得注意的是，这两条命令重启后就会失效，所以我们需要添加到/etc/rc.local中去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/rc.local</span><br></pre></td></tr></table></figure><p>修改成下面所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Put your custom commands here that should be executed once</span></span><br><span class="line"><span class="comment"># the system init finished. By default this file does nothing.</span></span><br><span class="line"></span><br><span class="line">ipset -N gfwipset iphash</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -m <span class="built_in">set</span> --match-set gfwipset dst -j REDIRECT --to-port 1080</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>至此，所有配置均已完成，重启路由即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reboot</span><br></pre></td></tr></table></figure><h1 id="五、关于gfwlist转换成dnsmasq的配置文件"><a href="#五、关于gfwlist转换成dnsmasq的配置文件" class="headerlink" title="五、关于gfwlist转换成dnsmasq的配置文件"></a>五、<strong>关于gfwlist转换成dnsmasq的配置文件</strong></h1><p>这是我从网上找到的一个Python的脚本</p><figure class="highlight python"><figcaption><span>gfwlist.py</span><a href="http://axisray.me/share/gfwlist.py" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Modified from http://autoddvpn.googlecode.com/svn/trunk/grace.d/gfwListgen.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> expanduser</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">gfwlist = <span class="string">'http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt'</span></span><br><span class="line"><span class="comment"># some sites can be visited via https or is already in known list</span></span><br><span class="line">oklist = [<span class="string">'flickr.com'</span>,<span class="string">'amazon.com'</span>,<span class="string">'twimg.com'</span>]</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"fetching gfwList ..."</span>)</span><br><span class="line">d = urllib.urlopen(gfwlist).read()</span><br><span class="line">print(<span class="string">"gfwList fetched"</span>)</span><br><span class="line">data = base64.b64decode(d)</span><br><span class="line">lines = string.split(data, <span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">gfwlistfile = open(<span class="string">'./gfwlist.txt'</span>, <span class="string">'wa'</span>)</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br><span class="line">gfwlistfile.write(l+<span class="string">'\n'</span>)</span><br><span class="line">gfwlistfile.close()</span><br><span class="line"></span><br><span class="line">newlist = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> lines:</span><br><span class="line"><span class="keyword">if</span> len(l) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> l[<span class="number">0</span>] == <span class="string">"!"</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> l[<span class="number">0</span>] == <span class="string">"@"</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> l[<span class="number">0</span>] == <span class="string">"["</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">l = string.replace(l, <span class="string">"||"</span>,<span class="string">""</span>).lstrip(<span class="string">"."</span>)</span><br><span class="line">l = string.replace(l, <span class="string">"|https://"</span>,<span class="string">""</span>)</span><br><span class="line">l = string.replace(l, <span class="string">"|http://"</span>,<span class="string">""</span>)</span><br><span class="line"><span class="comment"># strip everything from "/" to the end</span></span><br><span class="line"><span class="keyword">if</span> l.find(<span class="string">"/"</span>) != <span class="number">-1</span>:</span><br><span class="line">        l = l[<span class="number">0</span>:l.find(<span class="string">"/"</span>)]</span><br><span class="line"><span class="keyword">if</span> l.find(<span class="string">"%2F"</span>) != <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> l.find(<span class="string">"*"</span>) != <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> l.find(<span class="string">"."</span>) == <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">if</span> l <span class="keyword">in</span> oklist:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">newlist.append(l)</span><br><span class="line"></span><br><span class="line">newlist = list(set(newlist))</span><br><span class="line">newlist.sort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate dnsmasq configuration</span></span><br><span class="line">gfwdn = open(<span class="string">'./gfwdomains.conf'</span>, <span class="string">'wa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> newlist:</span><br><span class="line">        gfwdn.write(<span class="string">'server=/'</span>+l+<span class="string">'/127.0.0.1#5353\n'</span>)<span class="comment">#ss-tunel</span></span><br><span class="line">        gfwdn.write(<span class="string">'ipset=/'</span>+l+<span class="string">'/gfwipset\n'</span>)<span class="comment">#ipset</span></span><br><span class="line"></span><br><span class="line">gfwdn.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、&lt;strong&gt;前言&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;虽然&lt;em&gt;Chrome&lt;/em&gt;里的&lt;em&gt;SwitchySharp&lt;/em&gt;插件可以根据规则自动转发特定流量到&lt;em&gt;Shadowsocks&lt;/em&gt;，但是这种方式局限性还是很大。[北落师门][1]的博文中提供了一种在路由上自动转发特定流量的方法，使得转发过程对于客户端是透明的。我参考他的方法，做了一些改进。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用gfwlist扩大适用网站范围&lt;/li&gt;
&lt;li&gt;使用ss-tunnel解决DNS污染&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt; 大致过程如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;dnsmasq将指定列表中的域名通过ss-tunnel发往未被污染的DNS进行解析，并将结果保存到ipset中&lt;/li&gt;
&lt;li&gt;在iptable中建立规则，将ipset中的IP的TCP流量重定向到ss-redir透明代理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="openwrt" scheme="http://blog.raycn.pub/categories/openwrt/"/>
    
    
      <category term="openwrt" scheme="http://blog.raycn.pub/tags/openwrt/"/>
    
      <category term="shadowsocks" scheme="http://blog.raycn.pub/tags/shadowsocks/"/>
    
  </entry>
  
</feed>

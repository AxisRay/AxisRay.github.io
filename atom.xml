<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray of Hope</title>
  
  
  <link href="http://blog.raycn.pub/atom.xml" rel="self"/>
  
  <link href="http://blog.raycn.pub/"/>
  <updated>2021-09-25T05:24:34.000Z</updated>
  <id>http://blog.raycn.pub/</id>
  
  <author>
    <name>Ray Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【PM3】对公司新工卡的分析记录（三）——数据分析(上)</title>
    <link href="http://blog.raycn.pub/2021/09/25/20210925-employee-badge-analysis-3/"/>
    <id>http://blog.raycn.pub/2021/09/25/20210925-employee-badge-analysis-3/</id>
    <published>2021-09-25T05:24:34.000Z</published>
    <updated>2021-09-25T05:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上次说到嗅探工具准备就绪。而在上周，我已经成功的获取并完成了数据的分析。为了分析数据，我这期间啃了几本协议文档，下面就详细回顾下分析过程。</p><h1 id="嗅探结果"><a href="#嗅探结果" class="headerlink" title="嗅探结果"></a>嗅探结果</h1><p>完整的嗅探结果如下所示。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">131729168 |  131730224 | Rdr |26(7)                                                                    |     | REQA</span><br><span class="line">131731412 |  131733780 | Tag |04  00                                                                   |     | </span><br><span class="line">131748736 |  131751200 | Rdr |93  20                                                                   |     | ANTICOLL</span><br><span class="line">131752388 |  131758212 | Tag |c1  f0  6a  3e  65                                                       |     | </span><br><span class="line">131773664 |  131784192 | Rdr |93  70  c1  f0  6a  3e  65  aa  80                                       |  ok | SELECT_UID</span><br><span class="line">131785380 |  131788900 | Tag |28  b4  fc                                                               |     | </span><br><span class="line">131803088 |  131807856 | Rdr |e0  81  b8  62                                                           |  ok | RATS</span><br><span class="line">131820036 |  131840900 | Tag |10  78  80  a0  02  20  90  00  00  00  00  00  c1  f0  6a  3e  85  43   |  ok |</span><br><span class="line">131858480 |  131871248 | Rdr |0a  01  00  a4  00  00  02  3f  00  bf  eb                               |  ok |</span><br><span class="line">131900900 |  131934436 | Tag |0a  01  6f  15  84  0e  31  50  41  59  2e  53  59  53  2e  44  44  46   |     | </span><br><span class="line">          |            |     |30  31  a5  03  08  01  01  90  00  b2  6b                               |  ok | </span><br><span class="line">131947040 |  131973632 | Rdr |0b  01  00  a4  04  00  0e  4e  43  2e  65  43  61  72  64  2e  44  44   |     |</span><br><span class="line">          |            |     |46  30  31  a7  8b                                                       |  ok |</span><br><span class="line">132031972 |  132031972 | Tag |0b  01  6f  37  84  0e  4e  43  2e  65  43  61  72  64  2e  44  44  46   |     | </span><br><span class="line">          |            |     |30  31  a5  25  9f  08  01  02  9f  0c  1e  6e  65  77  63  61  70  65   |     | </span><br><span class="line">          |            |     |63  00  05  aa  00  00  01  88  0a  10  00  1a  34  00  00  00  00  00   |     | </span><br><span class="line">          |            |     |00  00  00  f8  6f  90  00  d7  28                                       |  ok | </span><br><span class="line">132115200 |  132125664 | Rdr |0a  01  00  b0  95  00  1e  fc  42                                       |  ok |</span><br><span class="line">132148164 |  132189764 | Tag |0a  01  6e  65  77  63  61  70  65  63  00  05  aa  00  00  01  88  0a   |     | </span><br><span class="line">          |            |     |10  00  1a  34  00  00  00  00  00  00  00  00  f8  6f  90  00  b7  86   |  ok | </span><br><span class="line">132314336 |  132327104 | Rdr |0b  01  00  a4  00  00  02  3f  00  42  a6                               |  ok |</span><br><span class="line">132353556 |  132387028 | Tag |0b  01  6f  15  84  0e  31  50  41  59  2e  53  59  53  2e  44  44  46   |     | </span><br><span class="line">          |            |     |30  31  a5  03  08  01  01  90  00  fa  39                               |  ok | </span><br><span class="line">132473664 |  132478432 | Rdr |ba  01  37  c8                                                           |  ok |</span><br><span class="line">132480884 |  132485556 | Tag |ab  01  7e  44                                                           |     | </span><br><span class="line">132560176 |  132586832 | Rdr |0a  01  00  a4  04  00  0e  4e  43  2e  65  43  61  72  64  2e  44  44   |     |</span><br><span class="line">          |            |     |46  30  31  cb  bc                                                       |  ok | </span><br><span class="line">132645476 |  132645476 | Tag |0a  01  6f  37  84  0e  4e  43  2e  65  43  61  72  64  2e  44  44  46   |     | </span><br><span class="line">          |            |     |30  31  a5  25  9f  08  01  02  9f  0c  1e  6e  65  77  63  61  70  65   |     | </span><br><span class="line">          |            |     |63  00  05  aa  00  00  01  88  0a  10  00  1a  34  00  00  00  00  00   |     | </span><br><span class="line">          |            |     |00  00  00  f8  6f  90  00  6b  5f                                       |  ok | </span><br><span class="line">133829600 |  133834304 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">133836820 |  133841556 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">135185296 |  135190000 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">135192516 |  135197252 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">136541248 |  136545952 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">136548468 |  136553204 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">137897200 |  137901904 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">137904436 |  137909172 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">139253168 |  139257872 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">139260388 |  139265124 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">140609120 |  140613824 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">140616340 |  140621076 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">141965072 |  141969776 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">141972292 |  141977028 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">143321024 |  143325728 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">143328244 |  143332980 | Tag |aa  01  a6  5d                                                           |     | </span><br><span class="line">143465664 |  143470368 | Rdr |bb  01  ef  d1                                                           |  ok | </span><br><span class="line">143472884 |  143476916 | Tag |aa  01  a6  0d                                                           |     | </span><br></pre></td></tr></table></figure><h1 id="嗅探分析"><a href="#嗅探分析" class="headerlink" title="嗅探分析"></a>嗅探分析</h1><p>实际上我嗅探了两次，两次结果完全一致。这已经说明存在一个致命的问题，即没有随机数的存在，这意味着可以用重放的方式骗过门禁。</p><p>下面我们继续分析下交互的内容。</p><h1 id="ISO-x2F-IEC-14443-3"><a href="#ISO-x2F-IEC-14443-3" class="headerlink" title="ISO&#x2F;IEC 14443 - 3"></a>ISO&#x2F;IEC 14443 - 3</h1><p>第一部分是常规的ISO&#x2F;IEC 14443-3 TypeA的激活、选卡的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">131729168 |  131730224 | Rdr |26(7)                                                                    |     | REQA</span><br><span class="line">131731412 |  131733780 | Tag |04  00                                                                   |     | </span><br><span class="line">131748736 |  131751200 | Rdr |93  20                                                                   |     | ANTICOLL</span><br><span class="line">131752388 |  131758212 | Tag |c1  f0  6a  3e  65                                                       |     | </span><br><span class="line">131773664 |  131784192 | Rdr |93  70  c1  f0  6a  3e  65  aa  80                                       |  ok | SELECT_UID</span><br><span class="line">131785380 |  131788900 | Tag |28  b4  fc                                                               |     | </span><br></pre></td></tr></table></figure><p>读卡器发出REQA（0x26）指令，Tag返回ATQA（0x0004）。</p><blockquote><p>根据ISO&#x2F;IEC 14443协议规范，传输的时候是低位在前。如下表，实际传输时从b1到b16，所以嗅探结果为0400。而实际上的ATQA的值是0004。</p></blockquote><table class="gridtable">    <tr>        <th colspan="8" align="left" >MSB</th>        <th colspan="8" align="right" >LSB</th>    <tr>    <tr>        <td>b16</td>        <td>b15</td>        <td>b14</td>        <td>b13</td>        <td>b12</td>        <td>b11</td>        <td>b10</td>        <td>b9</td>        <td>b8</td>        <td>b7</td>        <td>b6</td>        <td>b5</td>        <td>b4</td>        <td>b3</td>        <td>b2</td>        <td>b1</td>    <tr>    <tr>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>0</td>        <td>1</td>        <td>0</td>        <td>0</td>    </tr>    <tr>        <td colspan="4" align="center">Each bit RFU</td>        <td colspan="4" align="center">Proprietary coding</td>        <td colspan="2" align="center">UID size</td>        <td colspan="1" align="center">RFU</td>        <td colspan="5" align="center">Bit frame anticollision</td>    <tr></table><p>根据ISO&#x2F;IEC 14443-3中关于ATQA的格式定义（如上所示），可以得到UID大小类型为0x00，根据对照表（<a href="https://www.nxp.com/docs/en/application-note/AN10833.pdf">NXP的文档</a>中也有说明），UID长度为4Bytes（含1Byte的BCC校验码）。</p><p>而Bit frame anticollision字段，任意一位为1即说明支持防冲突帧，不同的卡这里可能会不同。但是根据NXP的文档，不建议用ATQA来区分卡片类型。因为这里存在冲突风险，当多张卡同时进入读卡器范围时，由于位冲突会导致识别错误。</p><p>下一步，读卡器继续发出ANTICOLLISION（0x9320）指令，进入防冲突循环。</p><table class="gridtable">    <tr>        <th>SEL</th>        <th>NVB</th>    <tr>    <tr>        <td>93</td>        <td>20</td></table><p>0x93代表SEL（ECT）命令（Select cascade level 1），0x20代表NVB（Number of Valid Bits)，即有效位数。其高八位是有效Byte，即总位数除以8的商；低八位是有效Bit，即总位数除以8的模。</p><p>这里的总位数是包括SEL和NVB自身，再加上后面的UID的位数。实际上这个命令完整应该是由SEL+NVB+UID1…UIDn+（BCC）组成。但对于读卡器，由于此时还不知道范围内有多少卡片，卡片的UID是多少。所以有效位数后面没有UID，其值只包含SEL和NVB，即NVB&#x3D;20。意味着所有的卡片都要报上自己的UID。由于我们只有一张卡片，不存在冲突问题。所以卡片直接回复自己的完整UID。</p><p>防冲突是标准中最精髓的部分，这里在ISO&#x2F;IEC 14443标准中有详细解释，以后可能单独写写这块，这里就不再赘述了。</p><table class="gridtable">    <tr>        <th>SEL</th>        <th>NVB</th>        <th colspan="4" align="center">UID</th>        <th>BCC</th>        <th colspan="2" align="center">CRC</th>    <tr>    <tr>        <td>93</td>        <td>70</td>        <td>C1</td>        <td>F0</td>        <td>6A</td>        <td>3E</td>        <td>65</td>        <td>AA</td>        <td>80</td></table><p>读卡器获取到没有冲突的完整UID后，便发出SEL命令（0x93）选中这张卡片。此时命令包含<br>1Byte的SEL、1Byte的NVB、4Bytes的UID再加上1Byte的BCC，共计7Bytes余0Bit。所以NVB为0x70。后面跟上UID和BCC,最后是CRC，组成完整的SELECT命令</p><table class="gridtable">    <tr>        <th>SAK</th>        <th colspan="2" align="center">CRC</th>    <tr>    <tr>        <td>28</td>        <td>B4</td>        <td>FC</td></table><p>卡片匹配到自己的UID之后，便以SAK（0x28）应答，查阅标准可知UID已经完整，且此卡支持ISO&#x2F;IEC 14443-4标准。从<a href="https://www.nxp.com/docs/en/application-note/AN10833.pdf">NXP的文档</a> 可以查阅到SAK&#x3D;28(b6&#x3D;1)是SmartMX with MIFAREClassic 1 K类型的卡片。</p><p>至此，ISO&#x2F;IEC 14443-3部分已经完成。从SAK可以看到卡片是支持ISO&#x2F;IEC 14443-4协议的，下一篇将开始分析-4协议交互部分。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;上次说到嗅探工具准备就绪。而在上周，我已经成功的获取并完成了数据的分析。为了分析数据，我这期间啃了几本协议文档，下面就详细回顾下分析过程。&lt;/p&gt;
&lt;h1 id=&quot;嗅探结果&quot;&gt;&lt;a href=&quot;#嗅探结果&quot; class=&quot;headerlink&quot; title=&quot;嗅探结果&quot;&gt;&lt;/a&gt;嗅探结果&lt;/h1&gt;&lt;p&gt;完整的嗅探结果如下所示。&lt;/p&gt;</summary>
    
    
    
    <category term="RFID" scheme="http://blog.raycn.pub/categories/RFID/"/>
    
    
    <category term="proxmark3" scheme="http://blog.raycn.pub/tags/proxmark3/"/>
    
    <category term="JCOP" scheme="http://blog.raycn.pub/tags/JCOP/"/>
    
  </entry>
  
  <entry>
    <title>【PM3】对公司新工卡的分析记录（二）——嗅探准备</title>
    <link href="http://blog.raycn.pub/2021/09/05/20210905-employee-badge-analysis-2/"/>
    <id>http://blog.raycn.pub/2021/09/05/20210905-employee-badge-analysis-2/</id>
    <published>2021-09-05T05:24:34.000Z</published>
    <updated>2021-09-05T05:24:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>上一篇说到公司换上了“新开普”工卡系统，新的工卡是一种CPU卡。其MIFAREClassic部分成功DUMP出来，但是没有有价值的信息，分析之路暂告一段落。</p><p>这次尝试使用PM3强大的Sniff（嗅探）功能，抓取和门禁的交互，看是否能够获取到有价值的信息。</p><h1 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h1><p>在之前<a href="https://raycn.pub/2021/08/21/reset-xiaomi-air-purifier-filters/">重置小米空气净化器滤芯寿命</a>那一篇中，已经初步领略到了嗅探功能的强大。这一次虽然还是嗅探，但是我们打算换一种方式使用。</p><p>PM3是要连接电脑使用的。想象一下，如果我们抱着电脑，拿着一个奇怪的小装置，在门禁旁边进行可疑的操作，一定会被警察叔叔当成可疑份子抓起来。所以要嗅探门禁，必须采取一种更加便捷、隐蔽的方式进行。</p><h1 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h1><span id="more"></span><h2 id="Standalone模式"><a href="#Standalone模式" class="headerlink" title="Standalone模式"></a>Standalone模式</h2><p>PM3提供了一种名为<a href="https://github.com/RfidResearchGroup/proxmark3/wiki/Standalone-mode">Standalone</a>的模式，可以让PM3在不连接电脑（客户端）的状态下运行一些特制的功能模块，并使用PM3上面唯一的按钮进行交互，通过指示灯来显示状态。</p><p>脱离了电脑，同时也就没有了电源。Standalone模式必须有独立的供电才行（废话），可以使用充电宝或者官方的BlueShark模块来供电。</p><h2 id="HF-14ASNIFF"><a href="#HF-14ASNIFF" class="headerlink" title="HF_14ASNIFF"></a>HF_14ASNIFF</h2><p>这里我们适用一个名为<code>HF_14ASNIFF</code>的模块（由<a href="https://github.com/micolous">Michael Farrell</a>提供）。正如其名，这个模块实现脱机嗅探，并保存在PM3的Flash中（仅RDV4版本支持）。这个模块可以让我们实现便捷、隐蔽的嗅探。</p><h2 id="固件更新"><a href="#固件更新" class="headerlink" title="固件更新"></a>固件更新</h2><p>PM3的固件只能包含一种嗅探功能。因此，需要重新编译包含此嗅探模块的固件。</p><p>执行下列命令，拉取最新的主线代码，并创建我们自定义的编译配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/RfidResearchGroup/proxmark3.git</span><br><span class="line">$ cd proxmark3/</span><br><span class="line">$ cp Makefile.platform.sample Makefile.platform</span><br></pre></td></tr></table></figure><p>编辑我们创建好的<code>Makefile.platform</code>。按下面所示,添加一行<code>STANDALONE=HF_14ASNIFF</code>。</p><p>如果你有BlueShark模块可以像我一样去掉<code>PLATFORM_EXTRAS=BTADDON</code>前面的＃号，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># If you want to use it, copy this file as Makefile.platform and adjust it to your needs</span><br><span class="line"># Run &#x27;make PLATFORM=&#x27; to get an exhaustive list of possible parameters for this file.</span><br><span class="line"></span><br><span class="line">PLATFORM=PM3RDV4</span><br><span class="line">#PLATFORM=PM3GENERIC</span><br><span class="line"># If you want more than one PLATFORM_EXTRAS option, separate them by spaces:</span><br><span class="line">PLATFORM_EXTRAS=BTADDON</span><br><span class="line">#STANDALONE=LF_SAMYRUN</span><br><span class="line">STANDALONE=HF_14ASNIFF</span><br></pre></td></tr></table></figure><p>执行下列命令，编译并刷入固件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make clean &amp;&amp; make all -j</span><br><span class="line">$ sudo ./pm3-flash-fullimage</span><br></pre></td></tr></table></figure><p>如果没有什么错误提示，我们就可以进入下一步验证环节</p><h2 id="嗅探测试"><a href="#嗅探测试" class="headerlink" title="嗅探测试"></a>嗅探测试</h2><p>PM3有A、B、C、D四个指示灯和一组电源灯，如下图所示：</p><p><img src="/img/2021-09-05-12-17-55.png" alt="指示灯"></p><p>拨动开关开机，然后长按按钮直至进入Standalone模式。此时A、B、C、D四个指示灯依次闪烁。最后A常亮。代表已经成功进入Standalone模式。</p><center><table><tr><td><img src="/img/1-power_on.gif" style="right: 10px;"></td><td><img src="/img/2-standalone.gif" ></td></tr></table></center><p>将PM3和卡片放在一起，靠近读卡器。此时，指示灯B、C交替闪烁，说明已经嗅探到卡片与读卡器的通信数据。</p><p>然后短按按钮，保存嗅探数据并退出Standalone模式。此时，指示灯A闪烁三次并熄灭。</p><center><table><tr><td><img src="/img/3-sniff.gif" style="right: 10px;"></td><td><img src="/img/4-save.gif" ></td></tr></table></center><p>至此嗅探数据已经保存到了Flash，后续掉电也不会丢失。</p><h2 id="获取嗅探数据"><a href="#获取嗅探数据" class="headerlink" title="获取嗅探数据"></a>获取嗅探数据</h2><p>下面我们读取嗅探到的数据。将PM3连接到PC，并打开客户端。<br>执行<code>mem spiffs tree</code>,便可以看到保存在Flash中的嗅探数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; mem spiffs tree</span><br><span class="line">[=] --- Flash Memory tree (SPIFFS) -----------------</span><br><span class="line"></span><br><span class="line">[#] [0008]       10252 B |-- hf_14asniff.trace</span><br></pre></td></tr></table></figure><p>执行<code>mem spiffs dump -s hf_14asniff.trace</code>下载到本地。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; mem spiffs dump -s hf_14asniff.trace</span><br><span class="line">[=] downloading 10252 bytes from `hf_14asniff.trace` (spiffs)</span><br><span class="line">[+] saved 10252 bytes to binary file hf_14asniff.trace</span><br></pre></td></tr></table></figure><p>执行<code>trace load -f hf_14asniff.trace</code>，加载嗅探数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; trace load -f hf_14asniff.trace</span><br><span class="line">[+] loaded 10252 bytes from binary file hf_14asniff.trace</span><br><span class="line">[+] Recorded Activity (TraceLen = 10252 bytes)</span><br></pre></td></tr></table></figure><p>执行<code>trace list -t 14a -1</code>，便可以查看如下所示的嗅探结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; trace list -t 14a -1</span><br><span class="line">[+] Recorded activity (trace len = 10252 bytes)</span><br><span class="line">[=] start = start of start frame end = end of frame. src = source of transfer</span><br><span class="line">[=] ISO14443A - all times are in carrier periods (1/13.56MHz)</span><br><span class="line"></span><br><span class="line">      Start |        End | Src | Data (! denotes parity error)                                           | CRC | Annotation</span><br><span class="line">------------+------------+-----+-------------------------------------------------------------------------+-----+--------------------</span><br><span class="line">          0 |        992 | Rdr |52(7)                                                                    |     | WUPA</span><br><span class="line">      79744 |      80736 | Rdr |52(7)                                                                    |     | WUPA</span><br><span class="line">...省略</span><br><span class="line">  775064448 |  775065504 | Rdr |26(7)                                                                    |     | REQA</span><br><span class="line">  775066676 |  775069044 | Tag |04  00                                                                   |     |</span><br><span class="line">  775095920 |  775098384 | Rdr |93  20                                                                   |     | ANTICOLL</span><br><span class="line">  775099556 |  775105380 | Tag |c1  f0  6a  3e  65                                                       |     |</span><br><span class="line">  775133776 |  775144304 | Rdr |93  70  c1  f0  6a  3e  65  aa  80                                       |  ok | SELECT_UID</span><br><span class="line">  775145492 |  775149012 | Tag |28  b4  fc                                                               |     |</span><br><span class="line">  775172288 |  775177056 | Rdr |e0  81  b8  62                                                           |  ok | RATS</span><br><span class="line">  775189252 |  775210116 | Tag |10  78  80  a0  02  20  90  00  00  00  00  00  c1  f0  6a  3e  85  43   |  ok |</span><br><span class="line">  775242416 |  775255184 | Rdr |0a  01  00  a4  00  00  02  3f  00  bf  eb                               |  ok |</span><br><span class="line">  775284852 |  775318388 | Tag |0a  01  6f  15  84  0e  31  50  41  59  2e  53  59  53  2e  44  44  46   |     |</span><br><span class="line">            |            |     |30  31  a5  03  08  01  01  90  00  b2  6b                               |  ok |</span><br><span class="line">  775347872 |  775374464 | Rdr |0b  01  00  a4  04  00  0e  4e  43  2e  65  43  61  72  64  2e  44  44   |     |</span><br><span class="line">            |            |     |46  30  31  a7  8b                                                       |  ok |</span><br><span class="line">  775432804 |  775432804 | Tag |0b  01  6f  37  84  0e  4e  43  2e  65  43  61  72  64  2e  44  44  46   |     |</span><br><span class="line">            |            |     |30  31  a5  25  9f  08  01  02  9f  0c  1e  6e  65  77  63  61  70  65   |     |</span><br><span class="line">            |            |     |63  00  05  aa  00  00  01  88  0a  10  00  1a  34  00  00  00  00  00   |     |</span><br><span class="line">            |            |     |00  00  00  f8  6f  90  00  d7  28                                       |  ok |</span><br><span class="line">  775539856 |  775550320 | Rdr |0a  01  00  b0  95  00  1e  fc  42                                       |  ok |</span><br><span class="line">  775572820 |  775614420 | Tag |0a  01  6e  65  77  63  61  70  65  63  00  05  aa  00  00  01  88  0a   |     |</span><br><span class="line">            |            |     |10  00  1a  34  00  00  00  00  00  00  00  00  f8  6f  90  00  b7  86   |  ok |</span><br><span class="line">...省略</span><br></pre></td></tr></table></figure><p>需要注意的是，嗅探不是100%可靠稳定的，有时候嗅探数据并不完整或者有错误，需要我们多试几次。</p><h1 id="万事俱备"><a href="#万事俱备" class="headerlink" title="万事俱备"></a>万事俱备</h1><p>至此，已经可以嗅探并查看读卡器与卡片的交互数据，所有的准备工作已经完成。下一篇，将抓取与门禁的数据，并继续工卡的分析。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h1&gt;&lt;p&gt;上一篇说到公司换上了“新开普”工卡系统，新的工卡是一种CPU卡。其MIFAREClassic部分成功DUMP出来，但是没有有价值的信息，分析之路暂告一段落。&lt;/p&gt;
&lt;p&gt;这次尝试使用PM3强大的Sniff（嗅探）功能，抓取和门禁的交互，看是否能够获取到有价值的信息。&lt;/p&gt;
&lt;h1 id=&quot;嗅探&quot;&gt;&lt;a href=&quot;#嗅探&quot; class=&quot;headerlink&quot; title=&quot;嗅探&quot;&gt;&lt;/a&gt;嗅探&lt;/h1&gt;&lt;p&gt;在之前&lt;a href=&quot;https://raycn.pub/2021/08/21/reset-xiaomi-air-purifier-filters/&quot;&gt;重置小米空气净化器滤芯寿命&lt;/a&gt;那一篇中，已经初步领略到了嗅探功能的强大。这一次虽然还是嗅探，但是我们打算换一种方式使用。&lt;/p&gt;
&lt;p&gt;PM3是要连接电脑使用的。想象一下，如果我们抱着电脑，拿着一个奇怪的小装置，在门禁旁边进行可疑的操作，一定会被警察叔叔当成可疑份子抓起来。所以要嗅探门禁，必须采取一种更加便捷、隐蔽的方式进行。&lt;/p&gt;
&lt;h1 id=&quot;工具准备&quot;&gt;&lt;a href=&quot;#工具准备&quot; class=&quot;headerlink&quot; title=&quot;工具准备&quot;&gt;&lt;/a&gt;工具准备&lt;/h1&gt;</summary>
    
    
    
    <category term="RFID" scheme="http://blog.raycn.pub/categories/RFID/"/>
    
    
    <category term="proxmark3" scheme="http://blog.raycn.pub/tags/proxmark3/"/>
    
    <category term="JCOP" scheme="http://blog.raycn.pub/tags/JCOP/"/>
    
  </entry>
  
  <entry>
    <title>【PM3】对公司新工卡的分析记录（一）——卡片分析</title>
    <link href="http://blog.raycn.pub/2021/08/28/20210828-employee-badge-analysis-1/"/>
    <id>http://blog.raycn.pub/2021/08/28/20210828-employee-badge-analysis-1/</id>
    <published>2021-08-28T02:21:22.000Z</published>
    <updated>2021-08-28T02:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司近期替换了整个工卡系统，新的工卡系统采用的是一家名为“新开普”公司的解决方案。</p><p>新的工卡到手，马上用PM3分析一波，看看相比之前漏洞百出的Mifare Classic卡有什么改进。</p><h1 id="卡片分析"><a href="#卡片分析" class="headerlink" title="卡片分析"></a>卡片分析</h1><p>执行<code>hf 14a info</code>看看是什么类型的卡片。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; hf 14a info</span><br><span class="line"></span><br><span class="line">[+]  UID: C1 F0 6A 3E</span><br><span class="line">[+] ATQA: 00 04</span><br><span class="line">[+]  SAK: 28 [1]</span><br><span class="line">[+] Possible types:</span><br><span class="line">[+]    SmartMX with MIFARE Classic 1K</span><br><span class="line">[=] -------------------------- ATS --------------------------</span><br><span class="line">[+] ATS: 10 78 80 A0 02 20 90 00 00 00 00 00 C1 F0 6A 3E [ 43 00 ]</span><br><span class="line">[=]      10...............  TL    length is 16 bytes</span><br><span class="line">[=]         78............  T0    TA1 is present, TB1 is present, TC1 is present, FSCI is 8 (FSC = 256)</span><br><span class="line">[=]            80.........  TA1   different divisors are NOT supported, DR: [], DS: []</span><br><span class="line">[=]               A0......  TB1   SFGI = 0 (SFGT = (not needed) 0/fc), FWI = 10 (FWT = 4194304/fc)</span><br><span class="line">[=]                  02...  TC1   NAD is NOT supported, CID is supported</span><br><span class="line"></span><br><span class="line">[=] -------------------- Historical bytes --------------------</span><br><span class="line">[+]    20900000000000C1F06A3E</span><br><span class="line">[+] Prng detection: weak</span><br><span class="line">[#] Auth error</span><br><span class="line">[?] Hint: try `hf mf` commands</span><br></pre></td></tr></table></figure><p>这是一张NXP的SmartMX系列的卡片，同时附带MIFARE Classic 1K模拟。SmartMX是NXP的JCOP卡系列，也就是说这张卡是一种CPU卡（也有叫做Java卡）。CPU卡意味着卡中有一个完整功能的CPU，并且带有操作系统，卡片的功能是基于软件实现的，而不是像MIFAREClassic这种基于ASIC的卡，用硬件电路实现卡片功能。</p><p>说了这么多废话，结论就是这种类型的卡相比较MifareClassic类型的卡要安全的多，几乎不可能被破解和复制。</p><p>那我们的分析之路已经到了尽头吗？也不一定，安全也是有“木桶效应”的。业务安不安全，并不只有卡片的安全等级决定，卡片安全只是一个因素。之前Mifare也有很多使用默认密码的案例。正好这张卡还带了MIFARE Classic 1K模拟，看看这个模拟MIFARE卡片里面有什么。</p><h1 id="尝试DUMP"><a href="#尝试DUMP" class="headerlink" title="尝试DUMP"></a>尝试DUMP</h1><p>执行<code>hf mf chk</code>看看有没有使用默认&#x2F;常见密码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; hf mf chk --dump</span><br><span class="line">[=] No key specified, trying default keys</span><br><span class="line">[ 0] ffffffffffff</span><br><span class="line">...省略</span><br><span class="line">[=] Start check for keys...</span><br><span class="line">[=] .................................</span><br><span class="line">[=] time in checkkeys 2 seconds</span><br><span class="line"></span><br><span class="line">[=] testing to read key B...</span><br><span class="line"></span><br><span class="line">[+] found keys:</span><br><span class="line"></span><br><span class="line">[+] |-----|----------------|---|----------------|---|</span><br><span class="line">[+] | Sec | key A          |res| key B          |res|</span><br><span class="line">[+] |-----|----------------|---|----------------|---|</span><br><span class="line">[+] | 000 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 001 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 002 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 003 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 004 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 005 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 006 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 007 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 008 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 009 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 010 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 011 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 012 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 013 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 014 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] | 015 | ffffffffffff   | 1 | ffffffffffff   | 1 |</span><br><span class="line">[+] |-----|----------------|---|----------------|---|</span><br><span class="line">[+] ( 0:Failed / 1:Success )</span><br><span class="line"></span><br><span class="line">[+] Generating binary key file</span><br><span class="line">[+] Found keys have been dumped to hf-mf-C1F06A3E-key.bin</span><br><span class="line">[=] FYI! --&gt; 0xFFFFFFFFFFFF &lt;-- has been inserted for unknown keys where res is 0</span><br></pre></td></tr></table></figure><p>看来都是默认密码，那估计也没什么有价值的内容在里面了。</p><p>执行<code>hf mf dump</code>尝试dump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; hf mf dump</span><br><span class="line">[!] No tag found.</span><br><span class="line">[usb] pm3 --&gt; hf mf dump</span><br><span class="line">[=] Using `hf-mf-C1F06A3E-key.bin`</span><br><span class="line">[=] Reading sector access bits...</span><br><span class="line">[=] .................</span><br><span class="line">[+] Finished reading sector access bits</span><br><span class="line">[=] Dumping all blocks from card...</span><br><span class="line">[+] successfully read block  0 of sector  0.</span><br><span class="line">...省略</span><br><span class="line">[+] time: 7 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Succeeded in dumping all blocks</span><br><span class="line"></span><br><span class="line">[+] saved 1024 bytes to binary file hf-mf-C1F06A3E-dump.bin</span><br><span class="line">[+] saved 64 blocks to text file hf-mf-C1F06A3E-dump.eml</span><br><span class="line">[+] saved to json file hf-mf-C1F06A3E-dump.json</span><br></pre></td></tr></table></figure><p>dump成功，看看里面有啥。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">[usb] pm3 --&gt; hf mf view -f hf-mf-C1F06A3E-dump.bin</span><br><span class="line">[+] loaded 1024 bytes from binary file hf-mf-C1F06A3E-dump.bin</span><br><span class="line"></span><br><span class="line">[=] ----+-------------------------------------------------+-----------------</span><br><span class="line">[=] blk | data                                            | ascii</span><br><span class="line">[=] ----+-------------------------------------------------+-----------------</span><br><span class="line">[=]   0 | C1 F0 6A 3E 65 28 04 00 00 00 00 00 00 00 00 00 | ..j&gt;e(..........</span><br><span class="line">[=]   1 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]   2 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]   3 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]   4 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]   5 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]   6 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]   7 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]   8 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]   9 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  10 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  11 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  12 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  13 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  14 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  15 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  16 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  17 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  18 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  19 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  20 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  21 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  22 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  23 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  24 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  25 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  26 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  27 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  28 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  29 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  30 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  31 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  32 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  33 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  34 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  35 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  36 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  37 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  38 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  39 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  40 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  41 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  42 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  43 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  44 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  45 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  46 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  47 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  48 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  49 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  50 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  51 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  52 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  53 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  54 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  55 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  56 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  57 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  58 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  59 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=]  60 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  61 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  62 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">[=]  63 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......</span><br><span class="line">[=] ----+-------------------------------------------------+-----------------</span><br></pre></td></tr></table></figure><p>果然不出所料，啥也没有。那单纯针对卡片的分析也就到此为止了，还需要收集其他信息才能更进一步了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;公司近期替换了整个工卡系统，新的工卡系统采用的是一家名为“新开普”公司的解决方案。&lt;/p&gt;
&lt;p&gt;新的工卡到手，马上用PM3分析一波，看看相比之前漏洞百出的Mifare Classic卡有什么改进。&lt;/p&gt;
&lt;h1 id=&quot;卡片分析&quot;&gt;&lt;a href=&quot;#卡片分析&quot; class=&quot;headerlink&quot; title=&quot;卡片分析&quot;&gt;&lt;/a&gt;卡片分析&lt;/h1&gt;&lt;p&gt;执行&lt;code&gt;hf 14a info&lt;/code&gt;看看是什么类型的卡片。&lt;/p&gt;</summary>
    
    
    
    <category term="RFID" scheme="http://blog.raycn.pub/categories/RFID/"/>
    
    
    <category term="proxmark3" scheme="http://blog.raycn.pub/tags/proxmark3/"/>
    
    <category term="JCOP" scheme="http://blog.raycn.pub/tags/JCOP/"/>
    
  </entry>
  
  <entry>
    <title>【PM3】重置小米空气净化器滤芯</title>
    <link href="http://blog.raycn.pub/2021/08/21/reset-xiaomi-air-purifier-filters/"/>
    <id>http://blog.raycn.pub/2021/08/21/reset-xiaomi-air-purifier-filters/</id>
    <published>2021-08-21T01:07:45.000Z</published>
    <updated>2021-08-21T01:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>家里小米空气净化器的滤芯又到期了，然而深圳这边空气质量平时就不错，应该还可以用很久。但是恼人的过期提示令我非常不爽，得想办法干掉这个提示。</p><p>根据网上的资料，小米空气净化器2S是依赖滤芯底部的RFID标签计算滤芯寿命的，正好手头有一块RFID的利器-Proxmark3。尝试下能否读取和修改RFID标签中的数据，来实现滤芯寿命的重置。<br><img src="/img/2021-08-21-12-50-41.png" alt="滤芯底部的标签"></p><h1 id="识别标签类型"><a href="#识别标签类型" class="headerlink" title="识别标签类型"></a>识别标签类型</h1><span id="more"></span><p>尝试使用<code>hf search</code>看下是什么类型的标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[fpc] pm3 --&gt; hf search</span><br><span class="line"> 🕕  Searching for ISO14443-A tag...</span><br><span class="line">[+]  UID: 53 5C 4D EE 02 1F 00</span><br><span class="line">[+] ATQA: 00 44</span><br><span class="line">[+]  SAK: 00 [2]</span><br><span class="line">[+] MANUFACTURER: Shanghai Feiju Microelectronics Co. Ltd. China</span><br><span class="line">[+] TYPE: NTAG 213 144bytes (NT2H1311G0DU)</span><br><span class="line">[+]    MIFARE Ultralight/C/NTAG Compatible</span><br><span class="line">[=] proprietary non iso14443-4 card found, RATS not supported</span><br><span class="line">[?] Hint: try `hf mfu info`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Valid ISO 14443-A tag found</span><br></pre></td></tr></table></figure><p>如结果所示，这是个NTAG标签，然后按提示执行<code>hf mfu info</code>看下进一步的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[fpc] pm3 --&gt; hf mfu info</span><br><span class="line"></span><br><span class="line">[=] --- Tag Information --------------------------</span><br><span class="line">[=] -------------------------------------------------------------</span><br><span class="line">[+]       TYPE: NTAG 213 144bytes (NT2H1311G0DU)</span><br><span class="line">[+]        UID: 53 5C 4D EE 02 1F 00</span><br><span class="line">[+]     UID[0]: 53, Shanghai Feiju Microelectronics Co. Ltd. China</span><br><span class="line">[+]       BCC0: CA (ok)</span><br><span class="line">[+]       BCC1: F3 (ok)</span><br><span class="line">[+]   Internal: 48 (default)</span><br><span class="line">[+]       Lock: 00 00  - 00</span><br><span class="line">[+] OneTimePad: E1 10 12 00  - @B0</span><br><span class="line"></span><br><span class="line">[=] --- NDEF Message</span><br><span class="line">[+] Capability Container: E1 10 12 00</span><br><span class="line">[+]   E1: NDEF Magic Number</span><br><span class="line">[+]   10: version 0.1 supported by tag</span><br><span class="line">[+]        : Read access granted without any security / Write access granted without any security</span><br><span class="line">[+]   12: Physical Memory Size: 144 bytes</span><br><span class="line">[+]   12: NDEF Memory Size: 144 bytes</span><br><span class="line">[+]   Additional feature information</span><br><span class="line">[+]   00</span><br><span class="line">[+]   00000000</span><br><span class="line">[+]   xxx      - 00: RFU (ok)</span><br><span class="line">[+]      x     - 00: don&#x27;t support special frame</span><br><span class="line">[+]       x    - 00: don&#x27;t support lock block</span><br><span class="line">[+]        xx  - 00: RFU (ok)</span><br><span class="line">[+]          x - 00: IC don&#x27;t support multiple block reads</span><br><span class="line"></span><br><span class="line">[=] --- Tag Counter</span><br><span class="line">[=]        [02]: 00 00 00</span><br><span class="line">[+]             - 00 tearing ( fail )</span><br><span class="line"></span><br><span class="line">[=] --- Tag Signature</span><br><span class="line">[=]     Elliptic curve parameters: NID_secp128r1</span><br><span class="line">[=]              TAG IC Signature: 0000000000000000000000000000000000000000000000000000000000000000</span><br><span class="line">[+]        Signature verification ( fail )</span><br><span class="line"></span><br><span class="line">[=] --- Tag Version</span><br><span class="line">[=]        Raw bytes: 00 53 04 02 01 00 0F 03</span><br><span class="line">[=]        Vendor ID: 53, Shanghai Feiju Microelectronics Co. Ltd. China</span><br><span class="line">[=]     Product type: 04, NTAG</span><br><span class="line">[=]  Product subtype: 02, 50pF</span><br><span class="line">[=]    Major version: 01</span><br><span class="line">[=]    Minor version: 00</span><br><span class="line">[=]             Size: 0F, (256 &lt;-&gt; 128 bytes)</span><br><span class="line">[=]    Protocol type: 03, ISO14443-3 Compliant</span><br><span class="line">[?] Hint: try `hf mfu pwdgen -r` to get see known pwd gen algo suggestions</span><br><span class="line">[=] ------------------------ Fingerprint -----------------------</span><br><span class="line">[=] Reading tag memory...</span><br><span class="line">[#] Cmd Error: 00</span><br><span class="line">[#] Read block 4 error</span><br><span class="line">[=] ------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>这个不是NXP官方产的NTAG，应该是国内一家叫做上海飞聚生产的NTAG兼容标签。</p><p>从输出结果可以看到，这个标签是有密码的，提示执行<code>hf mfu pwdgen -r</code>计算密码。但是我们不用这么麻烦，既然有PM3这种神器，可以直接通过sniff嗅探出NTAG密码。另外实际上我也测试过了，计算出来的密码都不对的。</p><h1 id="嗅探标签密码"><a href="#嗅探标签密码" class="headerlink" title="嗅探标签密码"></a>嗅探标签密码</h1><p>ok，话不多说，执行<code>hf 14a sniff</code>进入嗅探模式。不过由于标签在滤芯底部，没有空间把PM3塞进去，直接放在滤芯的桶里就好了，这个距离也是够的。然后把滤芯放回净化器并启动。为了保证效果，可以多试几次。<br><img src="/img/2021-08-21-12-52-34.png" alt="放在滤芯桶底部"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[fpc] pm3 --&gt; hf 14a sniff</span><br><span class="line"></span><br><span class="line">[#] Starting to sniff. Press PM3 Button to stop.</span><br><span class="line">[#] trace len = 606</span><br></pre></td></tr></table></figure><p>可以看到已经嗅探到数据了，执行<code>trace list -t 14a</code>看下嗅探的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[fpc] pm3 --&gt; hf 14a sniff</span><br><span class="line"></span><br><span class="line">[#] Starting to sniff. Press PM3 Button to stop.</span><br><span class="line">[#] trace len = 606</span><br><span class="line">[fpc] pm3 --&gt; trace list -t 14a</span><br><span class="line">[=] downloading tracelog data from device</span><br><span class="line">[+] Recorded activity (trace len = 606 bytes)</span><br><span class="line">[=] start = start of start frame end = end of frame. src = source of transfer</span><br><span class="line">[=] ISO14443A - all times are in carrier periods (1/13.56MHz)</span><br><span class="line"></span><br><span class="line">      Start |        End | Src | Data (! denotes parity error)                                           | CRC | Annotation</span><br><span class="line">------------+------------+-----+-------------------------------------------------------------------------+-----+--------------------</span><br><span class="line">          0 |       1056 | Rdr |26(7)                                                                    |     | REQA</span><br><span class="line">     419248 |     421712 | Rdr |93  20                                                                   |     | ANTICOLL</span><br><span class="line">     838544 |     849072 | Rdr |93  70  88  53  5c  4d  ca  3a  40                                       |  ok | SELECT_UID</span><br><span class="line">    1284848 |    1287312 | Rdr |95  20                                                                   |     | ANTICOLL-2</span><br><span class="line">    1704144 |    1714672 | Rdr |95  70  ee  02  1f  00  f3  3f  f8                                       |  ok | SELECT_UID-2</span><br><span class="line">    2109856 |    2118080 | Rdr |1b  bc  77  b6  ed  da  5b                                               |  ok | PWD-AUTH KEY: 0xbc77b6ed</span><br><span class="line">    2515568 |    2520272 | Rdr |30  04  26  ee                                                           |  ok | READBLOCK(4)</span><br><span class="line">    2521520 |    2538512 | Rdr |ff! ff! b7! b4! ff! ff! ce! cc! ff! de! fc! fa! ff! f9! 2b!              | !crc|</span><br><span class="line">    2934816 |    2939520 | Rdr |30  05  af  ff                                                           |  ok | READBLOCK(5)</span><br><span class="line">    3354032 |    3358800 | Rdr |30  06  34  cd                                                           |  ok | READBLOCK(6)</span><br><span class="line">.... 省略部分</span><br><span class="line">    3773328 |    3778096 | Rdr |30  07  bd  dc                                                           |  ok | READBLOCK(7)</span><br><span class="line">    4192560 |    4197264 | Rdr |30  08  4a  24                                                           |  ok | READBLOCK(8)</span><br></pre></td></tr></table></figure><blockquote><p>注意，嗅探完成必须要通过按钮终止嗅探，否则PM3会卡死。<br>给开发者提过这个问题，但是答复说是设计如此，是个Feature。</p></blockquote><p>啊哈哈，已经可以看到密码了，即<code>0xbc77b6ed</code>。同时我们也可以注意到，块（BLOCK）4、5、6、7、8被读取过。</p><h1 id="DUMP标签"><a href="#DUMP标签" class="headerlink" title="DUMP标签"></a>DUMP标签</h1><p>下一步先把这几个BLOCK或者将整个标签的数据dump下来。这里我们直接用刚才的密码，执行<code>hf mfu dump -k bc77b6ed</code>把整个标签dump下来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[fpc] pm3 --&gt; hf mfu dump -k bc77b6ed</span><br><span class="line">[+] TYPE: NTAG 213 144bytes (NT2H1311G0DU)</span><br><span class="line">[+] Reading tag memory...</span><br><span class="line">[=] MFU dump file information</span><br><span class="line">[=] -------------------------------------------------------------</span><br><span class="line">[=]       Version | 00 53 04 02 01 00 0F 03</span><br><span class="line">[=]         TBD 0 | 00 00</span><br><span class="line">[=]         TBD 1 | 00</span><br><span class="line">[=]     Signature | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">[=]     Counter 0 | 00 00 00</span><br><span class="line">[=]     Tearing 0 | 00</span><br><span class="line">[=]     Counter 1 | 00 00 00</span><br><span class="line">[=]     Tearing 1 | 00</span><br><span class="line">[=]     Counter 2 | 00 00 00</span><br><span class="line">[=]     Tearing 2 | 00</span><br><span class="line">[=] Max data page | 43 (176 bytes)</span><br><span class="line">[=]   Header size | 56</span><br><span class="line">[=] -------------------------------------------------------------</span><br><span class="line">[=] block#   | data        |lck| ascii</span><br><span class="line">[=] ---------+-------------+---+------</span><br><span class="line">[=]   0/0x00 | 53 5C 4D CA |   | S\M.</span><br><span class="line">[=]   1/0x01 | EE 02 1F 00 |   | ....</span><br><span class="line">[=]   2/0x02 | F3 48 00 00 |   | .H..</span><br><span class="line">[=]   3/0x03 | E1 10 12 00 | 0 | ....</span><br><span class="line">[=]   4/0x04 | 00 00 48 4B | 0 | ..HK</span><br><span class="line">[=]   5/0x05 | 00 00 31 33 | 0 | ..13</span><br><span class="line">[=]   6/0x06 | 00 21 03 05 | 0 | .!..</span><br><span class="line">[=]   7/0x07 | 00 06 14 77 | 0 | ...w</span><br><span class="line">[=]   8/0x08 | D6 DD 09 00 | 0 | ....</span><br><span class="line">.... 省略没数据的部分</span><br><span class="line">[=]  40/0x28 | 00 00 00 BD | 0 | ....</span><br><span class="line">[=]  41/0x29 | 04 00 00 04 | 0 | ....</span><br><span class="line">[=]  42/0x2A | C0 05 00 00 | 0 | ....</span><br><span class="line">[=]  43/0x2B | 00 00 00 00 | 0 | ....</span><br><span class="line">[=]  44/0x2C | 00 00 00 00 | 0 | ....</span><br><span class="line">[=] ---------------------------------</span><br><span class="line">[=] Using UID as filename</span><br><span class="line">[+] saved 236 bytes to binary file hf-mfu-535C4DEE021F00-dump.bin</span><br><span class="line">[+] saved to json file hf-mfu-535C4DEE021F00-dump.json</span><br></pre></td></tr></table></figure><p>dump成功，下一步就简单了， 有几种方式：</p><ol><li>把滤芯放回去继续使用。然后用到期后再将这几个BLOCK刷回去，即可把滤芯恢复到保存的时候的状态。</li><li>将滤芯回去使用一段时间后，再dump一次，观察哪些BLOCK发生了变化，分析规律或者找个新滤芯对比下。知道算法之后就可以直接将滤芯寿命修改为指定的值了</li></ol><h1 id="重置滤芯寿命"><a href="#重置滤芯寿命" class="headerlink" title="重置滤芯寿命"></a>重置滤芯寿命</h1><p>实际上这里只要把BLOCK 8清空掉就可以重置滤芯。执行<code>hf mfu wrbl -b 8 -d 00000000 -k bc77b6ed</code>清除BLOCK 8的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[fpc] pm3 --&gt; hf mfu wrbl -b 8 -d 00000000 -k bc77b6ed</span><br><span class="line">[=] Block: 8 (0x08) [ 00 00 00 00 ]</span><br><span class="line">[=] Using pwd BC 77 B6 ED</span><br><span class="line">[+] isOk:01</span><br></pre></td></tr></table></figure><p>清除完成功，可以把滤芯放回去看下效果。<br><img src="/img/2021-08-21-12-49-25.png" alt="100%寿命"><br>搞定！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;家里小米空气净化器的滤芯又到期了，然而深圳这边空气质量平时就不错，应该还可以用很久。但是恼人的过期提示令我非常不爽，得想办法干掉这个提示。&lt;/p&gt;
&lt;p&gt;根据网上的资料，小米空气净化器2S是依赖滤芯底部的RFID标签计算滤芯寿命的，正好手头有一块RFID的利器-Proxmark3。尝试下能否读取和修改RFID标签中的数据，来实现滤芯寿命的重置。&lt;br&gt;&lt;img src=&quot;/img/2021-08-21-12-50-41.png&quot; alt=&quot;滤芯底部的标签&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;识别标签类型&quot;&gt;&lt;a href=&quot;#识别标签类型&quot; class=&quot;headerlink&quot; title=&quot;识别标签类型&quot;&gt;&lt;/a&gt;识别标签类型&lt;/h1&gt;</summary>
    
    
    
    <category term="RFID" scheme="http://blog.raycn.pub/categories/RFID/"/>
    
    
    <category term="proxmark3" scheme="http://blog.raycn.pub/tags/proxmark3/"/>
    
  </entry>
  
  <entry>
    <title>Git如何合入上游仓库的分支</title>
    <link href="http://blog.raycn.pub/2020/02/06/git-merge-upstream/"/>
    <id>http://blog.raycn.pub/2020/02/06/git-merge-upstream/</id>
    <published>2020-02-06T12:03:45.000Z</published>
    <updated>2020-02-06T12:03:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>github上的开源项目有时无法完全满足自己需要，或者项目本身存在BUG，但是等不到开发者去修复。这时候我们往往会选择fork，然后自行修改或使用。但是一段时间后，原项目开发者可能会更新项目，追加新的功能或者修复已知BUG。这时，为了避免与上游脱节，我们需要将上游仓库合入到我们fork的仓库中。</p><span id="more"></span><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><p>这里以本blog的主题（theme）为例，我fork了原作者的仓库，并在其基础上做了些个性化的改动，这些改动作者肯定不会合入的。但是近期原作者做了一些更新，加入的新的功能，因此我要将最新的版本合入到我自己的仓库中。详细操作步骤如下：</p><h2 id="将要自己的仓库克隆（clone）到本地"><a href="#将要自己的仓库克隆（clone）到本地" class="headerlink" title="将要自己的仓库克隆（clone）到本地"></a>将要自己的仓库克隆（clone）到本地</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/AxisRay/hexo-theme-material-flow.git</span><br></pre></td></tr></table></figure><h2 id="添加要合入的上游仓库"><a href="#添加要合入的上游仓库" class="headerlink" title="添加要合入的上游仓库"></a>添加要合入的上游仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream https://github.com/stkevintan/hexo-theme-material-flow.git</span><br></pre></td></tr></table></figure><h2 id="拉取（pull）上游仓库"><a href="#拉取（pull）上游仓库" class="headerlink" title="拉取（pull）上游仓库"></a>拉取（pull）上游仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch upstream</span><br></pre></td></tr></table></figure><h2 id="创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支"><a href="#创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支" class="headerlink" title="创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支"></a>创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b upm upstream/master</span><br></pre></td></tr></table></figure><h2 id="切换到自己仓库要合入的分支，并将上述新分支合入"><a href="#切换到自己仓库要合入的分支，并将上述新分支合入" class="headerlink" title="切换到自己仓库要合入的分支，并将上述新分支合入"></a>切换到自己仓库要合入的分支，并将上述新分支合入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge upm</span><br></pre></td></tr></table></figure><h2 id="最后将自己仓库更新（push）上去即可"><a href="#最后将自己仓库更新（push）上去即可" class="headerlink" title="最后将自己仓库更新（push）上去即可"></a>最后将自己仓库更新（push）上去即可</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;github上的开源项目有时无法完全满足自己需要，或者项目本身存在BUG，但是等不到开发者去修复。这时候我们往往会选择fork，然后自行修改或使用。但是一段时间后，原项目开发者可能会更新项目，追加新的功能或者修复已知BUG。这时，为了避免与上游脱节，我们需要将上游仓库合入到我们fork的仓库中。&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="http://blog.raycn.pub/categories/git/"/>
    
    
    <category term="git" scheme="http://blog.raycn.pub/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>解决jenkins没有权限调用Docker的问题</title>
    <link href="http://blog.raycn.pub/2017/06/17/jenkins-docker-permission-problem/"/>
    <id>http://blog.raycn.pub/2017/06/17/jenkins-docker-permission-problem/</id>
    <published>2017-06-17T14:23:33.000Z</published>
    <updated>2017-06-17T14:23:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>jenkins在构建步骤中调用docker提示如下错误。</p><blockquote><p>dial unix &#x2F;var&#x2F;run&#x2F;docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?</p></blockquote><span id="more"></span><p>明显这是因为权限问题导致，参考<a href="https://stackoverflow.com/questions/40877705/var-run-docker-sock-permission-denied-while-running-docker-within-python-cgi-s">stackoverflow</a>上的解决方案，将Jenkins用户添加到docker组中，重启docker服务即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G docker <span class="variable">$username</span></span><br></pre></td></tr></table></figure><p>但是或许是由于docker或者系统版本比较老，没有所谓的docker组，只有dockerroot组。将jenkins添加到dockerroot组后仍然提示权限不足。直接让jenkins以root身份运行也不安全，于是考虑使用sudo曲线救国。  </p><ul><li>编辑sudoers文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br></pre></td></tr></table></figure></li><li>添加命令别名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## Docker</span><br><span class="line">Cmnd_Alias DOCKER = /usr/bin/docker</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>给jenkins以sudo权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenkins ALL=(ALL)       NOPASSWD:DOCKER</span><br></pre></td></tr></table></figure></li><li>:wq保存退出，调整jenkins构建步骤，增加sudo  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">16:09:36 Sending build context to Docker daemon   148 kB</span><br><span class="line">16:09:36 Sending build context to Docker daemon </span><br><span class="line">16:09:36 Step 0 : FROM microsoft/dotnet</span><br><span class="line">16:09:36  ---&gt; 2c9e30c8fccd</span><br><span class="line">16:09:36 Step 1 : WORKDIR /app</span><br><span class="line">16:09:36  ---&gt; Running in 3c50062d5f6d</span><br><span class="line">16:09:40  ---&gt; 3d22684a6579</span><br></pre></td></tr></table></figure>至此问题解决，不过这样还是后有些安全隐患，后续再考虑优化吧。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;jenkins在构建步骤中调用docker提示如下错误。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dial unix &amp;#x2F;var&amp;#x2F;run&amp;#x2F;docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
    <category term="docker" scheme="http://blog.raycn.pub/tags/docker/"/>
    
    <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
    <category term="jenkins" scheme="http://blog.raycn.pub/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Bash变量操作实验-变量的测试和内容替换</title>
    <link href="http://blog.raycn.pub/2015/01/29/linux-set-var/"/>
    <id>http://blog.raycn.pub/2015/01/29/linux-set-var/</id>
    <published>2015-01-29T02:15:21.000Z</published>
    <updated>2015-01-29T02:15:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>某些时候，我们在给变量赋值之前要对__某个__变量进行__判断__,根据结果来决定我们下一步的赋值操作，下面演示下几种判断的方式。</p><span id="more"></span><h1 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ var_value=<span class="string">&quot;test&quot;</span></span><br><span class="line">$ var_empty=<span class="string">&quot;&quot;</span></span><br><span class="line">$ <span class="built_in">unset</span> var_null</span><br><span class="line">$ result=<span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p>先创建4个变量（实际上是3个，因为var_null不存在）。<br>var_value值为test<br>var_empty值为空字符<br>var_null不存在，用unset确保它不存在<br>result用来保存结果，先赋个初值hello</p><!-- more --><h2 id="实验1、“-”操作符"><a href="#实验1、“-”操作符" class="headerlink" title="实验1、“-”操作符"></a>实验1、“-”操作符</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_null-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br></pre></td></tr></table></figure><p>因为$var_value存在，所以$result的值被替换成$var_value的值，即test<br>虽然$var_value为空字符，但也视为变量存在，因此$result的值被替换为$var_empty的值，即空字符<br>因为$var_null不存在，所以$result的值被替换为默认值default</p><p>要把空字符也视为变量不存在，则需要”:”操作符</p><blockquote><p><strong>Tips</strong><br>需要注意的是，绝大多数情况下，Bash并不区分空变量和空字符变量,但是此处会做区分。而“：”操作符会取消他们之间的差异。<br><a href="http://stackoverflow.com/questions/12262696/using-unset-vs-setting-a-variable-to-empty"><strong>详情可点击这里查看</strong></a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:-default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br></pre></td></tr></table></figure><h2 id="实验2、“-”操作符"><a href="#实验2、“-”操作符" class="headerlink" title="实验2、“+”操作符"></a>实验2、“+”操作符</h2><p>“+”基本上和“-”是完全相反的，而“：”则会和刚才一样把空字符变量和空变量一视同仁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br><span class="line">$ result=<span class="variable">$&#123;var_null+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实验3、“-x3D-”操作符"><a href="#实验3、“-x3D-”操作符" class="headerlink" title="实验3、“&#x3D;”操作符"></a>实验3、“&#x3D;”操作符</h2><p>“&#x3D;”操作符的规则基本和“-”一致，但是替换时会把两个变量一同替换。而“：”操作符会把空字符变量和空变量一视同仁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value=default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var_value</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty=default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var_value</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_null=default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">default</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$var_null</span></span><br><span class="line">default</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:+default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实验4、“-”操作符"><a href="#实验4、“-”操作符" class="headerlink" title="实验4、“?”操作符"></a>实验4、“?”操作符</h2><p>“?”操作符与“-”的差异是，当被检查的变量为空时，会将默认字符送入标准错误流，而不是赋值给变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_value?default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">hello</span><br><span class="line">$ result=<span class="variable">$&#123;var_empty?default&#125;</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_null?default&#125;</span></span><br><span class="line">bash: var_null: default</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br><span class="line">$ result=<span class="variable">$&#123;var_empty:?default&#125;</span></span><br><span class="line">bash: var_null: default</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;某些时候，我们在给变量赋值之前要对__某个__变量进行__判断__,根据结果来决定我们下一步的赋值操作，下面演示下几种判断的方式。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
    <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
    <category term="bash" scheme="http://blog.raycn.pub/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>tmux使用笔记</title>
    <link href="http://blog.raycn.pub/2015/01/28/tmux-intruduction/"/>
    <id>http://blog.raycn.pub/2015/01/28/tmux-intruduction/</id>
    <published>2015-01-28T04:33:42.000Z</published>
    <updated>2015-01-28T04:33:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tmux简介"><a href="#tmux简介" class="headerlink" title="tmux简介"></a>tmux简介</h1><p>tmux是<br>一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。tmux采用C&#x2F;S模型构建，包含以下模块Server，Session，Window，Panel<br><img src="/img/tmux.jpg" alt="tmux"></p><span id="more"></span><h1 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install tmux</span><br></pre></td></tr></table></figure><p>终端中键入tmux,首先会启动Server,然后就创建一个Session，这个Session会创建一个Window，仅包含一个Panel。</p><p>tmux new -s session<br>tmux new -s session -d #在后台建立会话<br>tmux ls #列出会话<br>tmux attach -t session #进入某个会话</p><ul><li><p>Server 服务器<br>第一次键入tmux启动的时候就开启了一个服务器Server，通过这个服务器甚至可以实现终端共享。</p></li><li><p>Session 会话<br>每使用tmux命令启动，便会建立一个会话Session，一个服务器可以保持多个会话连接，同时我们也可以在多个会话之间切换。</p></li><li><p>Window 窗口<br>一个Session可包含多个窗口Window，每个窗口都以标签的形式显示在Session下面的状态栏里</p></li><li><p>Panel 面板<br>每个窗口可以划分多个Panel，实现分屏显示</p></li></ul><h1 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h1><p>Ctrl+b (C-b) 是激活tmux控制台的默认快捷键，以下的控制命令都要先键入Ctrl+b激活控制台。</p><h2 id="1、系统操作"><a href="#1、系统操作" class="headerlink" title="1、系统操作"></a>1、系统操作</h2><p> <strong>?</strong> 列出所有快捷键；按q返回<br> <strong>d</strong> 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话<br> <strong>D</strong> 选择要脱离的会话；在同时开启了多个会话时使用<br> <strong>s</strong> 选择并切换会话；在同时开启了多个会话时使用<br> <strong>:</strong> 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器<br> <strong>[</strong> 进入复制模式；此时的操作与vi&#x2F;emacs相同，按q&#x2F;Esc退出<br> <strong>~</strong> 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息<br> <strong>C-z</strong> 挂起当前会话</p><h2 id="2、窗口操作"><a href="#2、窗口操作" class="headerlink" title="2、窗口操作"></a>2、窗口操作</h2><p><strong>c</strong> 创建新窗口<br><strong>&amp;</strong> 关闭当前窗口<br><strong>p</strong> 切换至上一窗口<br><strong>n</strong> 切换至下一窗口<br><strong>l</strong> 在前后两个窗口间互相切换<br><strong>w</strong> 通过窗口列表切换窗口<br><strong>,</strong> 重命名当前窗口；这样便于识别<br><strong>.</strong> 修改当前窗口编号；相当于窗口重新排序<br><strong>f</strong> 在所有窗口中查找指定文本<br><strong>数字</strong> 切换至制定窗口</p><h2 id="3、面板操作"><a href="#3、面板操作" class="headerlink" title="3、面板操作"></a>3、面板操作</h2><p><strong>”</strong> 将当前面板平分为上下两块<br><strong>%</strong> 将当前面板平分为左右两块<br><strong>x</strong> 关闭当前面板<br><strong>!</strong> 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板<br><strong>q</strong> 显示面板编号<br><strong>o</strong> 在当前窗口中选择下一面板<br><strong>{</strong> 向前置换当前面板<br><strong>}</strong> 向后置换当前面板<br><strong>Alt+o</strong> 逆时针旋转当前窗口的面板<br><strong>Alt+方向键</strong> 以5个单元格为单位移动边缘以调整当前面板大小<br><strong>Ctrl+o</strong> 顺时针旋转当前窗口的面板<br><strong>方向键</strong> 移动光标以选择面板<br><strong>Ctrl+方向键</strong> 以1个单元格为单位移动边缘以调整当前面板大小<br><strong>Space</strong> 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;tmux简介&quot;&gt;&lt;a href=&quot;#tmux简介&quot; class=&quot;headerlink&quot; title=&quot;tmux简介&quot;&gt;&lt;/a&gt;tmux简介&lt;/h1&gt;&lt;p&gt;tmux是&lt;br&gt;一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。tmux采用C&amp;#x2F;S模型构建，包含以下模块Server，Session，Window，Panel&lt;br&gt;&lt;img src=&quot;/img/tmux.jpg&quot; alt=&quot;tmux&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
    <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
    <category term="tmux" scheme="http://blog.raycn.pub/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下修改Bash的提示符</title>
    <link href="http://blog.raycn.pub/2015/01/27/ubuntu-change-bash-prompt/"/>
    <id>http://blog.raycn.pub/2015/01/27/ubuntu-change-bash-prompt/</id>
    <published>2015-01-27T14:23:33.000Z</published>
    <updated>2015-01-27T14:23:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Bash的提示符设置保存在$PS1这个变量中，通过echo命令可以查看当前设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ray@Ray-Laptop:~$ <span class="built_in">echo</span> <span class="variable">$PS1</span></span><br><span class="line"><span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h:\w\$ </span><br></pre></td></tr></table></figure><span id="more"></span><p>默认的一些特殊符号所代表的含义：<br><strong>\d</strong> ：代表日期，格式为weekday month date，例如：”Mon Aug 1”<br><strong>\H</strong> ：完整的主机名称。例如：我的机器名称为：Ray-Laptop.local，则这个名称就是Ray-Laptop.local<br><strong>\h</strong> ：仅取主机的第一个名字，如上例，则为Ray-Laptop，local则被省略<br><strong>\t</strong> ：显示时间为24小时格式，如：HH：MM：SS<br><strong>\T</strong> ：显示时间为12小时格式<br><strong>\A</strong> ：显示时间为24小时格式：HH：MM<br><strong>\u</strong> ：当前用户的账号名称<br><strong>\v</strong> ：BASH的版本信息<br><strong>\w</strong> ：完整的工作目录名称。家目录会以 ~代替<br><strong>\W</strong> ：利用basename取得工作目录名称，所以只会列出最后一个目录<br><strong>\#</strong> ：下达的第几个命令<br><strong>$</strong> ：提示字符，如果是root时，提示符为：# ，普通用户则为：$</p><p>我们可以通过修改提示符方法解决进入较深目录时，提示符过长的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h:\W\$ </span><br></pre></td></tr></table></figure><p>即将原来的\w替换为\W，但是该方法仅在本次会话有效。我们可通过修改用户根目录～下的.bashrc文件，达到长期有效的目的。</p><p>修改前：<br><img src="/img/prompt-too-long.png" alt="prompt-too-long"><br>修改后：<br><img src="/img/prompt-proper.png" alt="prompt-proper"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Bash的提示符设置保存在$PS1这个变量中，通过echo命令可以查看当前设置&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ray@Ray-Laptop:~$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$PS1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;debian_chroot:+($debian_chroot)&amp;#125;&lt;/span&gt;\u@\h:\w\$ &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
    <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
    <category term="bash" scheme="http://blog.raycn.pub/tags/bash/"/>
    
    <category term="prompt" scheme="http://blog.raycn.pub/tags/prompt/"/>
    
  </entry>
  
  <entry>
    <title>linux文件及目录权限笔记</title>
    <link href="http://blog.raycn.pub/2015/01/04/linux-dir-and-file-permission/"/>
    <id>http://blog.raycn.pub/2015/01/04/linux-dir-and-file-permission/</id>
    <published>2015-01-04T06:44:36.000Z</published>
    <updated>2015-01-04T06:44:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p>权限分三种，读（r）写（w）可执行（x）。“r–”、“rw-”、“rwx”这三种权限组合没什么好说的。“r–”只读，“rw-”可读可写，“rwx”可读可写可执行，下面介绍几种比较另类权限组合。</p><span id="more"></span><h2 id="w-、-wx："><a href="#w-、-wx：" class="headerlink" title="-w-、-wx："></a><strong>-w-、-wx：</strong></h2><p>只写权限，只能写入不能读取。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw--w- 1 root root    5 Jan  4 12:00 testfile</span><br><span class="line">/tmp$ cat testfile</span><br><span class="line">cat: testfile: Permission denied</span><br><span class="line">/tmp$ <span class="built_in">echo</span> <span class="string">&quot;write-test&quot;</span>&gt;testfile</span><br><span class="line">/tmp$ su root</span><br><span class="line">Password: </span><br><span class="line">root@axisray:/tmp<span class="comment"># cat testfile </span></span><br><span class="line">write-test</span><br></pre></td></tr></table></figure><h2 id="–x、-wx："><a href="#–x、-wx：" class="headerlink" title="–x、-wx："></a><strong>–x、-wx：</strong></h2><p>虽然有执行权限，但是由于没有读权限，连文件内容都不知道谈何执行呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw---x  1 root root   26 Jan  4 12:53 testfile*</span><br><span class="line">/tmp$ ./testfile </span><br><span class="line">/bin/bash: ./testfile: Permission denied</span><br><span class="line">/tmp$ su root</span><br><span class="line">Password: </span><br><span class="line">root@axisray:/tmp<span class="comment"># chmod o=rx testfile</span></span><br><span class="line">root@axisray:/tmp$ ll | grep testfile</span><br><span class="line">-rw-rw-r-x  1 root root   26 Jan  4 12:53 testfile*</span><br><span class="line">root@axisray:/tmp<span class="comment"># su ray</span></span><br><span class="line">/tmp$ ./testfile </span><br><span class="line">hello!</span><br></pre></td></tr></table></figure><h1 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h1><p>目录权限的关键在于可执行权限（x），下面逐个说明</p><h2 id="r–、rw-、-w-："><a href="#r–、rw-、-w-：" class="headerlink" title="r–、rw-、-w-："></a>r–、rw-、-w-：</h2><p>无可执行<br>drwxr-xr– 4 root root 4096 Jan  4 11:53 test&#x2F;</p><p>cd命令需要可执行（x）权限，因此无法通过cd命令切换到该目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">bash: <span class="built_in">cd</span>: <span class="built_in">test</span>/: Permission denied</span><br></pre></td></tr></table></figure><p>子目录也是不可切换的，即便对子目录有完整权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ <span class="built_in">cd</span> <span class="built_in">test</span>/test-dir1/</span><br><span class="line">bash: <span class="built_in">cd</span>: <span class="built_in">test</span>/test-dir1/: Permission denied</span><br></pre></td></tr></table></figure><p>同样对于cat命令，由于缺少可执行（x）权限，该目录下的文件也是不可读的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ cat <span class="built_in">test</span>/test-file2</span><br><span class="line">cat: <span class="built_in">test</span>/test-file2: Permission denied</span><br></pre></td></tr></table></figure><p>cp命令也是不可以的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ cp <span class="built_in">test</span>/test-file2 ./</span><br><span class="line">cp: cannot <span class="built_in">stat</span> ‘<span class="built_in">test</span>/test-file2’: Permission denied</span><br></pre></td></tr></table></figure><p>若该目录权限为rw-或-w-即有写入权限，由于缺少可执行（x）权限，也无法用mkdir等命令创建文件或目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ mkdir <span class="built_in">test</span>/testdir</span><br><span class="line">mkdir: cannot create directory ‘<span class="built_in">test</span>/testdir’: Permission denied</span><br><span class="line">/tmp$ cp testfile ./<span class="built_in">test</span>/</span><br><span class="line">cp: cannot <span class="built_in">stat</span> ‘./<span class="built_in">test</span>/testfile’: Permission denied</span><br></pre></td></tr></table></figure><p>同样即使该目录下的文件可读可执行，也无法执行该目录下的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ./<span class="built_in">test</span>/test-file2</span><br><span class="line">bash: ./<span class="built_in">test</span>/test-file2: Permission denied</span><br></pre></td></tr></table></figure><p>ll命令虽然可以列出该目录下的文件及目录，但是同样因为可执行（x）权限无法查看属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ll <span class="built_in">test</span></span><br><span class="line">ls: cannot access <span class="built_in">test</span>/..: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/.: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/test-file2: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/test-dir2: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/test-dir1: Permission denied</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/test-file1: Permission denied</span><br><span class="line">total 0</span><br><span class="line">d????????? ? ? ? ?            ? ./</span><br><span class="line">d????????? ? ? ? ?            ? ../</span><br><span class="line">d????????? ? ? ? ?            ? test-dir1/</span><br><span class="line">d????????? ? ? ? ?            ? test-dir2/</span><br><span class="line">-????????? ? ? ? ?            ? test-file1</span><br><span class="line">-????????? ? ? ? ?            ? test-file2</span><br></pre></td></tr></table></figure><p>对子目录来说，无法列出文件及目录，即便有完整权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ll <span class="built_in">test</span>/test-dir1/</span><br><span class="line">ls: cannot access <span class="built_in">test</span>/test-dir1/: Permission denied</span><br></pre></td></tr></table></figure><h2 id="–x、-wx、rwx、r-x："><a href="#–x、-wx、rwx、r-x：" class="headerlink" title="–x、-wx、rwx、r-x："></a>–x、-wx、rwx、r-x：</h2><p>有可执行权限<br>drwxr-x–x  4 root root 4096 Jan  4 13:15 test&#x2F;</p><p>使用cp命令可以正常切换至该目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ <span class="built_in">cd</span> <span class="built_in">test</span>/</span><br><span class="line">/tmp/<span class="built_in">test</span>$ </span><br></pre></td></tr></table></figure><p>但是无法使用ll列出该目录下的文件及目录，因为没有读权限（r）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ ll</span><br><span class="line">ls: cannot open directory .: Permission denied</span><br></pre></td></tr></table></figure><p>子目录不受影响，只要有相应权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ ll test-dir1</span><br><span class="line">total 12</span><br><span class="line">drwxr-xrwx 2 root root 4096 Jan  4 13:27 ./</span><br><span class="line">drwxr-x--x 4 root root 4096 Jan  4 13:15 ../</span><br><span class="line">-rw-r--r-- 1 root root    9 Jan  4 13:27 test-file3</span><br></pre></td></tr></table></figure><p>可使用cat查看目录下的文件，只要有相应文件的读权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ cat test-file2</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello!&quot;</span></span><br></pre></td></tr></table></figure><p>也可以使用cp拷贝该目录下的文件，只要有相应文件的读权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="built_in">test</span>$ cp test-file2 ../</span><br><span class="line">/tmp/<span class="built_in">test</span>$ <span class="built_in">cd</span> ..</span><br><span class="line">/tmp$ ll | grep test-file</span><br><span class="line">-rw-r--r-x  1 ray  ray    26 Jan  4 13:43 test-file2*</span><br></pre></td></tr></table></figure><p>也可以执行该目录下的文件，只要有相应文件的读和可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ ./<span class="built_in">test</span>/test-file2</span><br><span class="line">hello!</span><br></pre></td></tr></table></figure><p>如果该目录权限为-wx或rwx即有写入权限<br>我们就可以用mkdir、cp等命令在该目录创建子目录或文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/tmp$ mkdir <span class="built_in">test</span>/testdir</span><br><span class="line">/tmp$ cp testfile <span class="built_in">test</span>/</span><br><span class="line">/tmp$ su root</span><br><span class="line">Password: </span><br><span class="line">root@axisray:/tmp<span class="comment"># ll test/</span></span><br><span class="line">total 24</span><br><span class="line">drwxrwxr-x 2 ray  ray  4096 Jan  4 14:29 testdir/</span><br><span class="line">drwxr-xrwx 2 root root 4096 Jan  4 13:27 test-dir1/</span><br><span class="line">drwxr-xrw- 2 root root 4096 Jan  4 13:15 test-dir2/</span><br><span class="line">-rw-rw-r-x 1 ray  ray    26 Jan  4 14:29 testfile*</span><br><span class="line">-rw-r----- 1 root root   11 Jan  4 13:15 test-file1</span><br><span class="line">-rw-r--r-x 1 root root   26 Jan  4 13:15 test-file2*</span><br></pre></td></tr></table></figure><p>如果该目录权限为r-x或rwx即有读取权限<br>我们可以用ll列出当前目录的子目录及文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@axisray:/tmp<span class="comment"># chmod o=rx test</span></span><br><span class="line">root@axisray:/tmp<span class="comment"># su ray</span></span><br><span class="line">/tmp$ ll <span class="built_in">test</span></span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 5 root root 4096 Jan  4 14:29 ./</span><br><span class="line">drwxrwxrwt 4 root root 4096 Jan  4 14:42 ../</span><br><span class="line">drwxrwxr-x 2 ray  ray  4096 Jan  4 14:29 testdir/</span><br><span class="line">drwxr-xrwx 2 root root 4096 Jan  4 13:27 test-dir1/</span><br><span class="line">drwxr-xrw- 2 root root 4096 Jan  4 13:15 test-dir2/</span><br><span class="line">-rw-rw-r-x 1 ray  ray    26 Jan  4 14:29 testfile*</span><br><span class="line">-rw-r----- 1 root root   11 Jan  4 13:15 test-file1</span><br><span class="line">-rw-r--r-x 1 root root   26 Jan  4 13:15 test-file2*</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>对于文件权限，<strong>可读权限（r）</strong>是<strong>可执行（x）</strong>的基础</li><li>对于目录权限，可执行（x）权限是关键，没有可执行权限意味着所有命令都不能在该目录及子目录下执行，该目录及子目录下的文件也不能被执行。这意味着我们常用的命令cd、ls、mkdir、cp、mv、rm等等在该目录下全部失效</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;文件权限&quot;&gt;&lt;a href=&quot;#文件权限&quot; class=&quot;headerlink&quot; title=&quot;文件权限&quot;&gt;&lt;/a&gt;文件权限&lt;/h1&gt;&lt;p&gt;权限分三种，读（r）写（w）可执行（x）。“r–”、“rw-”、“rwx”这三种权限组合没什么好说的。“r–”只读，“rw-”可读可写，“rwx”可读可写可执行，下面介绍几种比较另类权限组合。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
    <category term="linux" scheme="http://blog.raycn.pub/tags/linux/"/>
    
    <category term="bash" scheme="http://blog.raycn.pub/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>解决TortoiseSVN/Git覆盖图标失效的问题</title>
    <link href="http://blog.raycn.pub/2014/12/09/tortoise-icon-problem/"/>
    <id>http://blog.raycn.pub/2014/12/09/tortoise-icon-problem/</id>
    <published>2014-12-09T12:38:23.000Z</published>
    <updated>2014-12-09T12:38:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现TortoiseGit的覆盖图标不见了，从版本库里clone下来的源码没有了已同步，已修改之类的图标提示。下面给出解决办法：（感谢<a href="http://blog.csdn.net/woyaowenzi/article/details/7538053">woyaowenzi</a>）</p><span id="more"></span><p>Windows最多允许15个覆盖图标，系统占用了约4个，用户可用的只有11个左右。<br>TortoiseSVN或者TortoiseGit标准会占用7个覆盖图标，分别为：<br><em>普通图标、已修改图标、冲突指示图标、已删除图标、新增文件图标、忽略图标、未版本化图标</em><br>而每个网盘类的客户端又会占用3个左右。<br><img src="/img/tortoise-icon.gif" alt="tortoise-icon"><br>所有应用程序的覆盖图标都需要在注册表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers</span><br></pre></td></tr></table></figure><p>下面增加一个项目，当需要显示覆盖图标时，Windows会按照项目名称的字母顺利依次查询在这些项目里所指示的接口，以检测是否有覆盖图标，<em>当检测到11个有效的接口后，Windows就会自动停止继续向下检测，这样，后来的覆盖图标就不会显示了。</em></p><p>__解决方法__：把其他网盘类的覆盖图标注册表项删除，让TortoiseSVN&#x2F;Git的注册表项提前</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近发现TortoiseGit的覆盖图标不见了，从版本库里clone下来的源码没有了已同步，已修改之类的图标提示。下面给出解决办法：（感谢&lt;a href=&quot;http://blog.csdn.net/woyaowenzi/article/details/7538053&quot;&gt;woyaowenzi&lt;/a&gt;）&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="http://blog.raycn.pub/categories/git/"/>
    
    
    <category term="git" scheme="http://blog.raycn.pub/tags/git/"/>
    
    <category term="tortoise" scheme="http://blog.raycn.pub/tags/tortoise/"/>
    
  </entry>
  
  <entry>
    <title>解决ubuntu下phpmyadmin缺少mcrypt扩展的错误</title>
    <link href="http://blog.raycn.pub/2014/12/06/php-mod-mcrypt/"/>
    <id>http://blog.raycn.pub/2014/12/06/php-mod-mcrypt/</id>
    <published>2014-12-06T13:08:46.000Z</published>
    <updated>2014-12-06T13:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ubuntu用apt-get安装phpmyadmin后，总会出现如下错误<br><img src="/img/php-mcrypt.gif" alt="php-mod-mcrypt"><br>解决方法很简单，使用如下命令启用mcrypt组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ php5enmod mcrypt</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在ubuntu用apt-get安装phpmyadmin后，总会出现如下错误&lt;br&gt;&lt;img src=&quot;/img/php-mcrypt.gif&quot; alt=&quot;php-mod-mcrypt&quot;&gt;&lt;br&gt;解决方法很简单，使用如下命令启用mcrypt组件&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="linux" scheme="http://blog.raycn.pub/categories/linux/"/>
    
    
    <category term="ubuntu" scheme="http://blog.raycn.pub/tags/ubuntu/"/>
    
    <category term="phpmyadmin" scheme="http://blog.raycn.pub/tags/phpmyadmin/"/>
    
  </entry>
  
  <entry>
    <title>从光盘或镜像中安装.NetFramework</title>
    <link href="http://blog.raycn.pub/2014/12/05/install-netfx3-from-sysimg/"/>
    <id>http://blog.raycn.pub/2014/12/05/install-netfx3-from-sysimg/</id>
    <published>2014-12-05T03:55:12.000Z</published>
    <updated>2014-12-05T03:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>windows8预装了.Net Framework4.0，但是4.0并不会向下兼容使用更早.Net版本编写的程序。当我们运行一个使用更早版本编写的.Net程序时，Windows会自动帮我们下载并安装.Net Framework3.5。但是当遇到没有网络或者网速比较慢的时候就比较难受了。所以我们可以选择从Windows8光盘或者镜像安装.<br>假设光盘或光盘镜像的盘符为X，在命令提示符中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /LimitAccess /Source:X:\sources\sxs</span><br></pre></td></tr></table></figure><p><img src="/img/NetFx3.gif" alt="NetFx3"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;windows8预装了.Net Framework4.0，但是4.0并不会向下兼容使用更早.Net版本编写的程序。当我们运行一个使用更早版本编写的.Net程序时，Windows会自动帮我们下载并安装.Net Framework3.5。但是当遇到没有网络或者网速比较慢的时候就</summary>
      
    
    
    
    <category term="windows" scheme="http://blog.raycn.pub/categories/windows/"/>
    
    
    <category term="dotnet" scheme="http://blog.raycn.pub/tags/dotnet/"/>
    
  </entry>
  
</feed>

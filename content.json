{"meta":{"title":"Ray of Hope","subtitle":"","description":"","author":"Ray Lee","url":"http://blog.raycn.pub","root":"/"},"pages":[{"title":"","date":"2022-02-01T02:37:41.676Z","updated":"2022-02-01T02:37:41.676Z","comments":true,"path":".well-known/microsoft-identity-association.json","permalink":"http://blog.raycn.pub/.well-known/microsoft-identity-association.json","excerpt":"","text":"{\"associatedApplications\":[{\"applicationId\":\"26e5c087-347f-4ec8-8422-f611d0401686\"}]}"},{"title":"","date":"2022-02-01T02:37:41.676Z","updated":"2022-02-01T02:37:41.676Z","comments":true,"path":"about/index.html","permalink":"http://blog.raycn.pub/about/index.html","excerpt":"","text":"Ray Lee's Resume 李锐 软件测试工程师/测试项目经理 基本信息 姓名 李锐 学历 本科 专业 生物技术 毕业院校 西安电子科技大学 毕业年份 2016 联系方式 手机 l8l-2466-74l2 邮箱 rayleesky@outlook.com 个人主页 axisray.github.io GitHub github.com/axisray 技术栈 语言 C#，Python 技能 Linux、网络协议 证书&荣誉 证书 PMP项目管理认证 荣誉 深信服“共同创业者” 应聘岗位 工作经历 深信服－测试项目经理（M4） — 2019年3月 至今 1、测试项目经理 AF8.0.25控制面重构版本 测试PM 项目团队：20+人，项目时间：2019年10月 至 2020年8月 针对重构版本特点，制定模板化测试设计方案。 降低新人测试设计上手难度，消除测试设计延期风险。 联合EP团队设计接口自动化测试方案，并推动在版本内落地。 引入zabbix/grafana改进稳定性环境监控。 相比人工监控减少了人力投入和问题识别的滞后性。 AF8.0.14版本 测试PM 项目团队：8人，项目时间：2019年4月 至 2019年9月 设计实现应用识别的识别率自动化验收方案，提升测试效率。 深信服－软件测试工程师（T4） — 2018年3月 至 2019年3月 1、功能/性能测试设计和执行 负责AF8.0.8版本文件杀毒模块测试设计和执行 根据云平台API接口规范，模拟云平台响应，实现模块内部逻辑全覆盖。 版本内发现缺陷最多，发布后无漏测问题，当季度绩效为A。 负责AF8.0.10重构版本ALG、NAT等核心模块的功能/性能测试设计/执行。 引入T-rex性能测试工具，减少SPT测试仪的依赖，提升测试效率。 2、应急支撑/自动化测试 支撑一线POC测试。 负责僵尸网络模块基线自动化方案重构设计及编写。 对用例和关键字进行整合优化，原有用例构建时间缩短30%。 引入scapy包回放解决自动化障碍，模块自动化率提升到80%。 深信服－技术支持工程师（T3） — 2016年7月 至 2018年3月 1、负责金融行业安全产品项目方案设计、实施和售后服务 在某银行的网点WIFI项目中，编写Python脚本用于全国1800+网关设备的维护。使用脚本模拟登陆和操作，实现批量化版本获取、序列号查询更新、配置备份、网监对接实施等，有效提升工作效率。 2、负责渠道微信预约系统的开发维护（微信后端，服务器运维） 负责平台架构设计。为了便于部署和后期扩展，采用容器化方式部署，使用Docker-Compose对容器编排。 负责微信后端的开发，实现微信接口的二次封装，便于Web管理平台调用；实现微信OAuth认证和二维码签到功能。 教育经历 西安电子科技大学 - 生物技术专业（全日制本科）2012-2016 个人项目 MiFareCloner（Arduino）） 基于Arduino+PN532的MiFare 1K卡片的复制器 移植libnfc读写CUID卡的功能到Arduino平台，实现卡片克隆。 osu-BeatmapAutoLoader（C#） OSU!的辅助程序 通过Win32Api Hook拦截程序请求，绕开浏览器调用，实现联机模式BeatMap的自动下载和导入。 CPViewer（C++，毕业设计） 基于VTK+QT的，医学图像（CT/OPT）三维重建程序。 开源贡献 修正libnfc在Windows下编译错误和无法读取配置文件的问题 https://github.com/nfc-tools/libnfc/pull/308 修正GetMenu函数始终返回Null的问题 https://github.com/JeffreySu/WeiXinMPSDK/pull/973 增加多配置文件切换功能 https://github.com/kxjhlele/v2ray-taskbar/pull/5"},{"title":"","date":"2022-02-01T02:37:41.676Z","updated":"2022-02-01T02:37:41.676Z","comments":true,"path":"about/static/css/style.css","permalink":"http://blog.raycn.pub/about/static/css/style.css","excerpt":"","text":"@font-face{font-family:iconfont;src:url('../fonts/iconfont.eot');src:url('../fonts/iconfont.eot?#iefix') format('embedded-opentype'),url('../fonts/iconfont.woff') format('woff'),url('../fonts/iconfont.ttf') format('truetype'),url('../fonts/iconfont.svg#iconfont') format('svg')}.icon-work:before{content:\"\\eac9\"}.icon-project:before{content:\"\\eaf4\"}.icon-phone:before{content:\"\\ec7a\"}.icon-stars:before{content:\"\\ed32\"}.icon-star:before{content:\"\\ed1b\"}.icon-person:before{content:\"\\ec88\"}.icon-librarybooks:before{content:\"\\ebf9\"}.icon-education:before{content:\"\\ebca\"}.icon-create:before{content:\"\\eaf8\"}.icon-call:before{content:\"\\eab6\"}.icon-weixin:before{content:\"\\3488\"}.icon-build:before{content:\"\\eaa2\"}.icon-edit:before{content:\"\\eb31\"}.icon-flower:before{content:\"\\ec0a\"}.icon-playlistadd:before{content:\"\\ecae\"}.icon-delete:before{content:\"\\e61b\"}.icon-trophy:before{content:\"\\e80b\"}.icon-favorite:before{content:\"\\eb4c\"}span{display:inline-block}.label-value{width:200px;vertical-align:top}.iconfont{font-family:iconfont!important;font-size:1.1em;font-style:normal;color:inherit;-webkit-font-smoothing:antialiased;-webkit-text-stroke-width:0.2px;-moz-osx-font-smoothing:grayscale}*{box-sizing:border-box;margin:0}h1,h2,h3,h4,h5{font-weight:500;color:#607d8b;line-height:1.5}.progress-list div{width:100%;margin-left:200px}.info-list,.progress-list{list-style:none;padding-left:0;font-size:16px;line-height:2}.stack-list{list-style:none;padding-left:0;line-height:1.5}.stack-list li{margin-bottom:12px}.right-list li{margin-bottom:12px}hr{margin-bottom:8px}.info-unit{color:#666;margin-bottom:20px}.remodal-img h3{float:left;margin-bottom:10px}.remodal-img input{float:left;width:480px;height:42px;font-size:20px;padding:6px;color:#666}.remodal-img button{float:right;background:#607d8b}.remodal-img button:hover{float:right;background:#607d8b}@media screen{body{background-color:#778899}}@media print{body{background-color:#fff}}body{font-family:sans-serif,Microsoft Yahei,Helvetica Neue;zoom:80%}p{line-height:1.5}progress{background-color:#f6f6f6;display:inline}progress::-webkit-progress-bar{background-color:#e0eaf0}progress::-webkit-progress-value{background-color:#708d9b}progress::-moz-progress-bar{background-color:#e0eaf0}progress::-moz-progress-value{background-color:#708d9b}.progress-list{line-height:2}.me{text-align:center;margin-bottom:20px}.weixin{margin-top:20px;background-color:#e0eaf0;position:relative;padding-top:40px;padding-bottom:40px;text-align:center}.weixin img{width:200px}.left-label{font-weight:700;display:inline-block;width:120px}.portrait{margin:0 auto;margin-top:20px;margin-bottom:10px;background-image:url('https://avatars0.githubusercontent.com/u/21081491?v=3&s=460');background-size:120%;background-position:center;border-radius:50%;border:5px solid #607d8b;width:160px;height:160px}.container{position:relative;margin:0 auto;width:1050px;height:auto;background-color:#fff}.side{position:absolute;width:360px;height:100%;background-color:#f5f5f5;padding-left:20px;padding-right:20px}.main{position:relative;margin-left:360px;min-height:100%;padding:20px}.info-header:hover{background-color:#d4dee4}.info-unit ul li:hover{background-color:#d4dee4}.info-header .unit-remove{float:right;margin-left:20px;visibility:hidden;cursor:pointer}.info-header .item-add{float:right;margin-left:20px;margin-right:2px;visibility:hidden;cursor:pointer}.info-title{font-weight:700}.item-remove{position:absolute;right:2px;margin-right:2px;visibility:hidden;cursor:pointer}ul li{position:relative}.experience-list .item-remove{position:absolute;right:2px;top:0;margin-right:2px;visibility:hidden;cursor:pointer}.item-title{font-weight:700}.stack-list .item-remove{position:absolute;right:2px;top:0;margin-right:2px;visibility:hidden;cursor:pointer}@media print{.noprint{display:none}}@media screen{.noscreen{display:none}}"},{"title":"","date":"2022-02-01T02:37:41.676Z","updated":"2022-02-01T02:37:41.676Z","comments":true,"path":"about/static/fonts/demo.css","permalink":"http://blog.raycn.pub/about/static/fonts/demo.css","excerpt":"","text":"*{margin:0;padding:0;list-style:none}blockquote,body,button,dd,dl,dt,fieldset,form,h1,h2,h3,h4,h5,h6,hr,input,legend,li,ol,p,pre,td,textarea,th,ul{margin:0;padding:0}body,button,input,select,textarea{font:12px/1.5 tahoma,arial,\\5b8b\\4f53,sans-serif}h1,h2,h3,h4,h5,h6{font-size:100%}address,cite,dfn,em,var{font-style:normal}code,kbd,pre,samp{font-family:courier new,courier,monospace}small{font-size:12px}ol,ul{list-style:none}a{text-decoration:none}a:hover{text-decoration:underline}legend{color:#000}fieldset,img{border:0}button,input,select,textarea{font-size:100%}table{border-collapse:collapse;border-spacing:0}.clear:after,.ks-clear:after{content:'\\20';display:block;height:0;clear:both}.main{padding:30px 100px}.main h1{font-size:36px;color:#333;text-align:left;margin-bottom:30px;border-bottom:1px solid #eee}.helps{margin-top:40px}.helps pre{padding:20px;margin:10px 0;border:solid 1px #e7e1cd;background-color:#fffdef;overflow:auto}.icon_lists li{float:left;width:100px;height:180px;text-align:center}.icon_lists .icon{font-size:42px;line-height:100px;margin:10px 0;color:#333;transition:font-size .25s ease-out 0s}.icon_lists .icon:hover{font-size:100px}"},{"title":"","date":"2022-02-01T02:37:41.676Z","updated":"2022-02-01T02:37:41.676Z","comments":true,"path":"about/static/fonts/demo.html","permalink":"http://blog.raycn.pub/about/static/fonts/demo.html","excerpt":"","text":"IconFont IconFont 图标 &#xea39; account_circle &amp;#xea39; .accountcircle &#xeac9; card_travel &amp;#xeac9; .cardtravel &#xeaf4; content_paste &amp;#xeaf4; .contentpaste &#xec7a; phone &amp;#xec7a; .phone &#xec7b; phone_android &amp;#xec7b; .phoneandroid &#xed32; stars &amp;#xed32; .stars &#xed1d; star_outline &amp;#xed1d; .staroutline &#xed1b; star &amp;#xed1b; .star &#xec88; person &amp;#xec88; .person &#xedac; work &amp;#xedac; .work &#xebf9; library_books &amp;#xebf9; .librarybooks &#xebca; import_contacts &amp;#xebca; .importcontacts &#xeaf8; create &amp;#xeaf8; .create &#xead7; comment &amp;#xead7; .comment &#xeab6; call &amp;#xeab6; .call &#x3488; 微信 &amp;#x3488; .weixin &#xeabe; camera &amp;#xeabe; .camera &#xeaa2; build &amp;#xeaa2; .build &#xea38; account_box &amp;#xea38; .accountbox &#xea7d; attach_money &amp;#xea7d; .attachmoney &#xea95; bookmark_outline &amp;#xea95; .bookmarkoutline &#xead2; chat_bubble_outline &amp;#xead2; .chatbubbleoutline &#xead0; chat &amp;#xead0; .chat &#xeadf; cloud &amp;#xeadf; .cloud &#xeb0f; desktop_windows &amp;#xeb0f; .desktopwindows &#xeb0e; desktop_mac &amp;#xeb0e; .desktopmac &#xeb31; edit &amp;#xeb31; .edit &#xeb4d; favorite_outline &amp;#xeb4d; .favoriteoutline &#xeb4c; favorite &amp;#xeb4c; .favorite &#xeb45; exposure_plus_1 &amp;#xeb45; .exposureplus1 &#xeb48; extension &amp;#xeb48; .extension &#xeb6f; flag &amp;#xeb6f; .flag &#xeb6e; fitness_center &amp;#xeb6e; .fitnesscenter &#xeb9c; free_breakfast &amp;#xeb9c; .freebreakfast &#xeb97; forum &amp;#xeb97; .forum &#xeba3; goat &amp;#xeba3; .goat &#xebc2; home &amp;#xebc2; .home &#xebc5; hourglass_empty &amp;#xebc5; .hourglassempty &#xec0a; local_florist &amp;#xec0a; .localflorist &#xec24; location_on &amp;#xec24; .locationon &#xec10; local_library &amp;#xec10; .locallibrary &#xecae; playlist_add &amp;#xecae; .playlistadd &#xebc0; highlight_remove &amp;#xebc0; .highlightremove &#xe61b; delete &amp;#xe61b; .delete &#xe610; delete &amp;#xe610; .delete1 &#xe643; delete &amp;#xe643; .delete2 &#xe620; add &amp;#xe620; .add &#xe676; add &amp;#xe676; .add1 &#xe816; trophy &amp;#xe816; .trophy &#xe6fc; trophy &amp;#xe6fc; .trophy1 &#xe80b; trophy &amp;#xe80b; .trophy2 第一步：使用font-face声明字体 @font-face {font-family: 'iconfont'; src: url('iconfont.eot'); /* IE9*/ src: url('iconfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */ url('iconfont.woff') format('woff'), /* chrome、firefox */ url('iconfont.ttf') format('truetype'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ url('iconfont.svg#iconfont') format('svg'); /* iOS 4.1- */ } 第二步：定义使用iconfont的样式 .iconfont{ font-family:\"iconfont\" !important; font-size:16px;font-style:normal; -webkit-font-smoothing: antialiased; -webkit-text-stroke-width: 0.2px; -moz-osx-font-smoothing: grayscale;} 第三步：挑选相应图标并获取字体编码，应用于页面 &lt;i class=\"iconfont\"&gt;&amp;#x33;&lt;/i&gt;"},{"title":"","date":"2022-02-01T02:37:41.676Z","updated":"2022-02-01T02:37:41.676Z","comments":true,"path":"about/static/fonts/iconfont.css","permalink":"http://blog.raycn.pub/about/static/fonts/iconfont.css","excerpt":"","text":"@font-face{font-family:iconfont;src:url('iconfont.eot?t=1472035662');src:url('iconfont.eot?t=1472035662#iefix') format('embedded-opentype'),url('iconfont.woff?t=1472035662') format('woff'),url('iconfont.ttf?t=1472035662') format('truetype'),url('iconfont.svg?t=1472035662#iconfont') format('svg')}.iconfont{font-family:iconfont!important;font-size:16px;font-style:normal;-webkit-font-smoothing:antialiased;-webkit-text-stroke-width:0.2px;-moz-osx-font-smoothing:grayscale}.icon-accountcircle:before{content:\"\\ea39\"}.icon-cardtravel:before{content:\"\\eac9\"}.icon-contentpaste:before{content:\"\\eaf4\"}.icon-phone:before{content:\"\\ec7a\"}.icon-phoneandroid:before{content:\"\\ec7b\"}.icon-stars:before{content:\"\\ed32\"}.icon-staroutline:before{content:\"\\ed1d\"}.icon-star:before{content:\"\\ed1b\"}.icon-person:before{content:\"\\ec88\"}.icon-work:before{content:\"\\edac\"}.icon-librarybooks:before{content:\"\\ebf9\"}.icon-importcontacts:before{content:\"\\ebca\"}.icon-create:before{content:\"\\eaf8\"}.icon-comment:before{content:\"\\ead7\"}.icon-call:before{content:\"\\eab6\"}.icon-weixin:before{content:\"\\3488\"}.icon-camera:before{content:\"\\eabe\"}.icon-build:before{content:\"\\eaa2\"}.icon-accountbox:before{content:\"\\ea38\"}.icon-attachmoney:before{content:\"\\ea7d\"}.icon-bookmarkoutline:before{content:\"\\ea95\"}.icon-chatbubbleoutline:before{content:\"\\ead2\"}.icon-chat:before{content:\"\\ead0\"}.icon-cloud:before{content:\"\\eadf\"}.icon-desktopwindows:before{content:\"\\eb0f\"}.icon-desktopmac:before{content:\"\\eb0e\"}.icon-edit:before{content:\"\\eb31\"}.icon-favoriteoutline:before{content:\"\\eb4d\"}.icon-favorite:before{content:\"\\eb4c\"}.icon-exposureplus1:before{content:\"\\eb45\"}.icon-extension:before{content:\"\\eb48\"}.icon-flag:before{content:\"\\eb6f\"}.icon-fitnesscenter:before{content:\"\\eb6e\"}.icon-freebreakfast:before{content:\"\\eb9c\"}.icon-forum:before{content:\"\\eb97\"}.icon-goat:before{content:\"\\eba3\"}.icon-home:before{content:\"\\ebc2\"}.icon-hourglassempty:before{content:\"\\ebc5\"}.icon-localflorist:before{content:\"\\ec0a\"}.icon-locationon:before{content:\"\\ec24\"}.icon-locallibrary:before{content:\"\\ec10\"}.icon-playlistadd:before{content:\"\\ecae\"}.icon-highlightremove:before{content:\"\\ebc0\"}.icon-delete:before{content:\"\\e61b\"}.icon-delete1:before{content:\"\\e610\"}.icon-delete2:before{content:\"\\e643\"}.icon-add:before{content:\"\\e620\"}.icon-add1:before{content:\"\\e676\"}.icon-trophy:before{content:\"\\e816\"}.icon-trophy1:before{content:\"\\e6fc\"}.icon-trophy2:before{content:\"\\e80b\"}"},{"title":"","date":"2022-02-01T02:37:41.680Z","updated":"2022-02-01T02:37:41.680Z","comments":true,"path":"about/static/js/modal.js","permalink":"http://blog.raycn.pub/about/static/js/modal.js","excerpt":"","text":"!function(e){\"use strict\";var s;e(document).ready(function(){var t;e.support.transition=void 0!==(t=(document.body||document.documentElement).style).transition||void 0!==t.WebkitTransition||void 0!==t.MozTransition||void 0!==t.MsTransition||void 0!==t.OTransition,e.support.transition&&(s=\"TransitionEnd\",e.browser.webkit?s=\"webkitTransitionEnd\":e.browser.mozilla?s=\"transitionend\":e.browser.opera&&(s=\"oTransitionEnd\"))});function n(t,i){return this.settings=e.extend({},e.fn.modal.defaults,i),this.$element=e(t).delegate(\".close\",\"click.modal\",e.proxy(this.hide,this)),this.settings.show&&this.show(),this}function o(t){this.$element.hide().trigger(\"hidden\"),a.call(this)}function a(t){var i,n=this.$element.hasClass(\"fade\")?\"fade\":\"\";this.isShown&&this.settings.backdrop?(i=e.support.transition&&n,this.$backdrop=e('').appendTo(document.body),\"static\"!=this.settings.backdrop&&this.$backdrop.click(e.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass(\"in\"),i?this.$backdrop.one(s,t):t()):!this.isShown&&this.$backdrop?(this.$backdrop.removeClass(\"in\"),e.support.transition&&this.$element.hasClass(\"fade\")?this.$backdrop.one(s,e.proxy(d,this)):d.call(this)):t&&t()}function d(){this.$backdrop.remove(),this.$backdrop=null}function h(){var i=this;this.isShown&&this.settings.keyboard?e(document).bind(\"keyup.modal\",function(t){27==t.which&&i.hide()}):this.isShown||e(document).unbind(\"keyup.modal\")}n.prototype={toggle:function(){return this[this.isShown?\"hide\":\"show\"]()},show:function(){var i=this;return this.isShown=!0,this.$element.trigger(\"show\"),h.call(this),a.call(this,function(){var t=e.support.transition&&i.$element.hasClass(\"fade\");i.$element.appendTo(document.body).show(),t&&i.$element[0].offsetWidth,i.$element.addClass(\"in\"),t?i.$element.one(s,function(){i.$element.trigger(\"shown\")}):i.$element.trigger(\"shown\")}),this},hide:function(t){if(t&&t.preventDefault(),!this.isShown)return this;return this.isShown=!1,h.call(this),this.$element.trigger(\"hide\").removeClass(\"in\"),(e.support.transition&&this.$element.hasClass(\"fade\")?function(){var t=this,i=setTimeout(function(){t.$element.unbind(s),o.call(t)},500);this.$element.one(s,function(){clearTimeout(i),o.call(t)})}:o).call(this),this}},e.fn.modal=function(t){var i=this.data(\"modal\");return i?!0===t?i:(\"string\"==typeof t?i[t]():i&&i.toggle(),this):(\"string\"==typeof t&&(t={show:/show|toggle/.test(t)}),this.each(function(){e(this).data(\"modal\",new n(this,t))}))},e.fn.modal.Modal=n,e.fn.modal.defaults={backdrop:!1,keyboard:!1,show:!1},e(document).ready(function(){e(\"body\").delegate(\"[data-controls-modal]\",\"click\",function(t){t.preventDefault();t=e(this).data(\"show\",!0);e(\"#\"+t.attr(\"data-controls-modal\")).modal(t.data())})})}(window.jQuery||window.ender);"},{"title":"","date":"2022-02-01T02:37:41.680Z","updated":"2022-02-01T02:37:41.680Z","comments":true,"path":"about/static/js/script.js","permalink":"http://blog.raycn.pub/about/static/js/script.js","excerpt":"","text":"String.prototype.format||(String.prototype.format=function(){var e=arguments;return this.replace(/{(\\d+)}/g,function(i,t){return void 0!==e[t]?e[t]:i})}),jQuery(document).ready(function(n){n(\".left-label\").attr(\"contenteditable\",\"true\"),n(\".label-value\").attr(\"contenteditable\",\"true\"),n(\".info-title\").attr(\"contenteditable\",\"true\"),n(\"h3\").attr(\"contenteditable\",\"true\"),n(\"p\").attr(\"contenteditable\",\"true\"),n(\".right-paragraph p\").attr(\"contenteditable\",\"true\"),n(\"#username\").attr(\"contenteditable\",\"true\"),n(\"#persona-tag\").attr(\"contenteditable\",\"true\"),n(\".info-unit ul li\").append(''),n(\".info-unit\").filter(function(i){return n(this).children(\"ul\").length}).children(\"h2\").append(''),n(\".info-unit h2\").append('');var t=n(\"[data-remodal-id=portrait-modal]\").remodal();n(\".portrait\").click(function(i){t.open()}),n(\"[data-remodal-id=portrait-modal] button\").click(function(i){n(\".portrait\").css(\"background-image\",'url(\"{0}\")'.format(n(\"#avatar-url\").val()))});var e=n(\"[data-remodal-id=weixin-modal]\").remodal();n(\".weixin\").click(function(i){e.open()}),n(\"[data-remodal-id=weixin-modal] button\").click(function(i){n(\".weixin img\").attr(\"src\",n(\"#weixin-url\").val())}),n(\".info-header\").hover(function(){n(this).children(\".unit-remove\").css(\"visibility\",\"visible\"),n(this).children(\".item-add\").css(\"visibility\",\"visible\")},function(){n(this).children(\".unit-remove\").css(\"visibility\",\"hidden\"),n(this).children(\".item-add\").css(\"visibility\",\"hidden\")}),n(\".info-unit ul li\").hover(function(){n(this).children(\".item-remove\").css(\"visibility\",\"visible\")},function(){n(this).children(\".item-remove\").css(\"visibility\",\"hidden\")}),n(\".unit-remove\").click(function(i){n(this).closest(\".info-unit\").remove()}),n(\".item-remove\").click(function(i){n(this).closest(\"li\").remove()}),n(\".item-add\").click(function(i){var t,e=n(this).closest(\".info-unit\");e.children(\"ul\")&&(e=(t=e.children(\"ul\")).children(\"li:first-child\").clone(!0),t.append(e))}),n(\"progress\").click(function(i){n(this).attr(\"value\",i.offsetX/n(this).width()/.8*n(this).attr(\"max\"))})});"}],"posts":[{"title":"【PM3】对公司新工卡的分析记录（三）——数据分析(上)","slug":"20210925-employee-badge-analysis-3","date":"2021-09-25T05:24:34.000Z","updated":"2021-09-25T05:24:34.000Z","comments":true,"path":"2021/09/25/20210925-employee-badge-analysis-3/","link":"","permalink":"http://blog.raycn.pub/2021/09/25/20210925-employee-badge-analysis-3/","excerpt":"前情提要上次说到嗅探工具准备就绪。而在上周，我已经成功的获取并完成了数据的分析。为了分析数据，我这期间啃了几本协议文档，下面就详细回顾下分析过程。 嗅探结果完整的嗅探结果如下所示。","text":"前情提要上次说到嗅探工具准备就绪。而在上周，我已经成功的获取并完成了数据的分析。为了分析数据，我这期间啃了几本协议文档，下面就详细回顾下分析过程。 嗅探结果完整的嗅探结果如下所示。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849131729168 | 131730224 | Rdr |26(7) | | REQA131731412 | 131733780 | Tag |04 00 | | 131748736 | 131751200 | Rdr |93 20 | | ANTICOLL131752388 | 131758212 | Tag |c1 f0 6a 3e 65 | | 131773664 | 131784192 | Rdr |93 70 c1 f0 6a 3e 65 aa 80 | ok | SELECT_UID131785380 | 131788900 | Tag |28 b4 fc | | 131803088 | 131807856 | Rdr |e0 81 b8 62 | ok | RATS131820036 | 131840900 | Tag |10 78 80 a0 02 20 90 00 00 00 00 00 c1 f0 6a 3e 85 43 | ok |131858480 | 131871248 | Rdr |0a 01 00 a4 00 00 02 3f 00 bf eb | ok |131900900 | 131934436 | Tag |0a 01 6f 15 84 0e 31 50 41 59 2e 53 59 53 2e 44 44 46 | | | | |30 31 a5 03 08 01 01 90 00 b2 6b | ok | 131947040 | 131973632 | Rdr |0b 01 00 a4 04 00 0e 4e 43 2e 65 43 61 72 64 2e 44 44 | | | | |46 30 31 a7 8b | ok |132031972 | 132031972 | Tag |0b 01 6f 37 84 0e 4e 43 2e 65 43 61 72 64 2e 44 44 46 | | | | |30 31 a5 25 9f 08 01 02 9f 0c 1e 6e 65 77 63 61 70 65 | | | | |63 00 05 aa 00 00 01 88 0a 10 00 1a 34 00 00 00 00 00 | | | | |00 00 00 f8 6f 90 00 d7 28 | ok | 132115200 | 132125664 | Rdr |0a 01 00 b0 95 00 1e fc 42 | ok |132148164 | 132189764 | Tag |0a 01 6e 65 77 63 61 70 65 63 00 05 aa 00 00 01 88 0a | | | | |10 00 1a 34 00 00 00 00 00 00 00 00 f8 6f 90 00 b7 86 | ok | 132314336 | 132327104 | Rdr |0b 01 00 a4 00 00 02 3f 00 42 a6 | ok |132353556 | 132387028 | Tag |0b 01 6f 15 84 0e 31 50 41 59 2e 53 59 53 2e 44 44 46 | | | | |30 31 a5 03 08 01 01 90 00 fa 39 | ok | 132473664 | 132478432 | Rdr |ba 01 37 c8 | ok |132480884 | 132485556 | Tag |ab 01 7e 44 | | 132560176 | 132586832 | Rdr |0a 01 00 a4 04 00 0e 4e 43 2e 65 43 61 72 64 2e 44 44 | | | | |46 30 31 cb bc | ok | 132645476 | 132645476 | Tag |0a 01 6f 37 84 0e 4e 43 2e 65 43 61 72 64 2e 44 44 46 | | | | |30 31 a5 25 9f 08 01 02 9f 0c 1e 6e 65 77 63 61 70 65 | | | | |63 00 05 aa 00 00 01 88 0a 10 00 1a 34 00 00 00 00 00 | | | | |00 00 00 f8 6f 90 00 6b 5f | ok | 133829600 | 133834304 | Rdr |bb 01 ef d1 | ok | 133836820 | 133841556 | Tag |aa 01 a6 5d | | 135185296 | 135190000 | Rdr |bb 01 ef d1 | ok | 135192516 | 135197252 | Tag |aa 01 a6 5d | | 136541248 | 136545952 | Rdr |bb 01 ef d1 | ok | 136548468 | 136553204 | Tag |aa 01 a6 5d | | 137897200 | 137901904 | Rdr |bb 01 ef d1 | ok | 137904436 | 137909172 | Tag |aa 01 a6 5d | | 139253168 | 139257872 | Rdr |bb 01 ef d1 | ok | 139260388 | 139265124 | Tag |aa 01 a6 5d | | 140609120 | 140613824 | Rdr |bb 01 ef d1 | ok | 140616340 | 140621076 | Tag |aa 01 a6 5d | | 141965072 | 141969776 | Rdr |bb 01 ef d1 | ok | 141972292 | 141977028 | Tag |aa 01 a6 5d | | 143321024 | 143325728 | Rdr |bb 01 ef d1 | ok | 143328244 | 143332980 | Tag |aa 01 a6 5d | | 143465664 | 143470368 | Rdr |bb 01 ef d1 | ok | 143472884 | 143476916 | Tag |aa 01 a6 0d | | 嗅探分析实际上我嗅探了两次，两次结果完全一致。这已经说明存在一个致命的问题，即没有随机数的存在，这意味着可以用重放的方式骗过门禁。 下面我们继续分析下交互的内容。 ISO/IEC 14443 - 3第一部分是常规的ISO/IEC 14443-3 TypeA的激活、选卡的过程 123456131729168 | 131730224 | Rdr |26(7) | | REQA131731412 | 131733780 | Tag |04 00 | | 131748736 | 131751200 | Rdr |93 20 | | ANTICOLL131752388 | 131758212 | Tag |c1 f0 6a 3e 65 | | 131773664 | 131784192 | Rdr |93 70 c1 f0 6a 3e 65 aa 80 | ok | SELECT_UID131785380 | 131788900 | Tag |28 b4 fc | | 读卡器发出REQA（0x26）指令，Tag返回ATQA（0x0004）。 根据ISO/IEC 14443协议规范，传输的时候是低位在前。如下表，实际传输时从b1到b16，所以嗅探结果为0400。而实际上的ATQA的值是0004。 MSB LSB b16 b15 b14 b13 b12 b11 b10 b9 b8 b7 b6 b5 b4 b3 b2 b1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 Each bit RFU Proprietary coding UID size RFU Bit frame anticollision 根据ISO/IEC 14443-3中关于ATQA的格式定义（如上所示），可以得到UID大小类型为0x00，根据对照表（NXP的文档中也有说明），UID长度为4Bytes（含1Byte的BCC校验码）。 而Bit frame anticollision字段，任意一位为1即说明支持防冲突帧，不同的卡这里可能会不同。但是根据NXP的文档，不建议用ATQA来区分卡片类型。因为这里存在冲突风险，当多张卡同时进入读卡器范围时，由于位冲突会导致识别错误。 下一步，读卡器继续发出ANTICOLLISION（0x9320）指令，进入防冲突循环。 SEL NVB 93 20 0x93代表SEL（ECT）命令（Select cascade level 1），0x20代表NVB（Number of Valid Bits)，即有效位数。其高八位是有效Byte，即总位数除以8的商；低八位是有效Bit，即总位数除以8的模。 这里的总位数是包括SEL和NVB自身，再加上后面的UID的位数。实际上这个命令完整应该是由SEL+NVB+UID1…UIDn+（BCC）组成。但对于读卡器，由于此时还不知道范围内有多少卡片，卡片的UID是多少。所以有效位数后面没有UID，其值只包含SEL和NVB，即NVB=20。意味着所有的卡片都要报上自己的UID。由于我们只有一张卡片，不存在冲突问题。所以卡片直接回复自己的完整UID。 防冲突是标准中最精髓的部分，这里在ISO/IEC 14443标准中有详细解释，以后可能单独写写这块，这里就不再赘述了。 SEL NVB UID BCC CRC 93 70 C1 F0 6A 3E 65 AA 80 读卡器获取到没有冲突的完整UID后，便发出SEL命令（0x93）选中这张卡片。此时命令包含1Byte的SEL、1Byte的NVB、4Bytes的UID再加上1Byte的BCC，共计7Bytes余0Bit。所以NVB为0x70。后面跟上UID和BCC,最后是CRC，组成完整的SELECT命令 SAK CRC 28 B4 FC 卡片匹配到自己的UID之后，便以SAK（0x28）应答，查阅标准可知UID已经完整，且此卡支持ISO/IEC 14443-4标准。从NXP的文档 可以查阅到SAK=28(b6=1)是SmartMX with MIFAREClassic 1 K类型的卡片。 至此，ISO/IEC 14443-3部分已经完成。从SAK可以看到卡片是支持ISO/IEC 14443-4协议的，下一篇将开始分析-4协议交互部分。","categories":[{"name":"RFID","slug":"RFID","permalink":"http://blog.raycn.pub/categories/RFID/"}],"tags":[{"name":"proxmark3","slug":"proxmark3","permalink":"http://blog.raycn.pub/tags/proxmark3/"},{"name":"JCOP","slug":"JCOP","permalink":"http://blog.raycn.pub/tags/JCOP/"}]},{"title":"【PM3】对公司新工卡的分析记录（二）——嗅探准备","slug":"20210905-employee-badge-analysis-2","date":"2021-09-05T05:24:34.000Z","updated":"2021-09-05T05:24:34.000Z","comments":true,"path":"2021/09/05/20210905-employee-badge-analysis-2/","link":"","permalink":"http://blog.raycn.pub/2021/09/05/20210905-employee-badge-analysis-2/","excerpt":"前情提要上一篇说到公司换上了“新开普”工卡系统，新的工卡是一种CPU卡。其MIFAREClassic部分成功DUMP出来，但是没有有价值的信息，分析之路暂告一段落。 这次尝试使用PM3强大的Sniff（嗅探）功能，抓取和门禁的交互，看是否能够获取到有价值的信息。 嗅探在之前重置小米空气净化器滤芯寿命那一篇中，已经初步领略到了嗅探功能的强大。这一次虽然还是嗅探，但是我们打算换一种方式使用。 PM3是要连接电脑使用的。想象一下，如果我们抱着电脑，拿着一个奇怪的小装置，在门禁旁边进行可疑的操作，一定会被警察叔叔当成可疑份子抓起来。所以要嗅探门禁，必须采取一种更加便捷、隐蔽的方式进行。 工具准备","text":"前情提要上一篇说到公司换上了“新开普”工卡系统，新的工卡是一种CPU卡。其MIFAREClassic部分成功DUMP出来，但是没有有价值的信息，分析之路暂告一段落。 这次尝试使用PM3强大的Sniff（嗅探）功能，抓取和门禁的交互，看是否能够获取到有价值的信息。 嗅探在之前重置小米空气净化器滤芯寿命那一篇中，已经初步领略到了嗅探功能的强大。这一次虽然还是嗅探，但是我们打算换一种方式使用。 PM3是要连接电脑使用的。想象一下，如果我们抱着电脑，拿着一个奇怪的小装置，在门禁旁边进行可疑的操作，一定会被警察叔叔当成可疑份子抓起来。所以要嗅探门禁，必须采取一种更加便捷、隐蔽的方式进行。 工具准备 Standalone模式PM3提供了一种名为Standalone的模式，可以让PM3在不连接电脑（客户端）的状态下运行一些特制的功能模块，并使用PM3上面唯一的按钮进行交互，通过指示灯来显示状态。 脱离了电脑，同时也就没有了电源。Standalone模式必须有独立的供电才行（废话），可以使用充电宝或者官方的BlueShark模块来供电。 HF_14ASNIFF这里我们适用一个名为HF_14ASNIFF的模块（由Michael Farrell提供）。正如其名，这个模块实现脱机嗅探，并保存在PM3的Flash中（仅RDV4版本支持）。这个模块可以让我们实现便捷、隐蔽的嗅探。 固件更新PM3的固件只能包含一种嗅探功能。因此，需要重新编译包含此嗅探模块的固件。 执行下列命令，拉取最新的主线代码，并创建我们自定义的编译配置文件。 123$ git clone https://github.com/RfidResearchGroup/proxmark3.git$ cd proxmark3/$ cp Makefile.platform.sample Makefile.platform 编辑我们创建好的Makefile.platform。按下面所示,添加一行STANDALONE=HF_14ASNIFF。 如果你有BlueShark模块可以像我一样去掉PLATFORM_EXTRAS=BTADDON前面的＃号， 123456789# If you want to use it, copy this file as Makefile.platform and adjust it to your needs# Run &#x27;make PLATFORM=&#x27; to get an exhaustive list of possible parameters for this file.PLATFORM=PM3RDV4#PLATFORM=PM3GENERIC# If you want more than one PLATFORM_EXTRAS option, separate them by spaces:PLATFORM_EXTRAS=BTADDON#STANDALONE=LF_SAMYRUNSTANDALONE=HF_14ASNIFF 执行下列命令，编译并刷入固件。 12$ make clean &amp;&amp; make all -j$ sudo ./pm3-flash-fullimage 如果没有什么错误提示，我们就可以进入下一步验证环节 嗅探测试PM3有A、B、C、D四个指示灯和一组电源灯，如下图所示： 拨动开关开机，然后长按按钮直至进入Standalone模式。此时A、B、C、D四个指示灯依次闪烁。最后A常亮。代表已经成功进入Standalone模式。 将PM3和卡片放在一起，靠近读卡器。此时，指示灯B、C交替闪烁，说明已经嗅探到卡片与读卡器的通信数据。 然后短按按钮，保存嗅探数据并退出Standalone模式。此时，指示灯A闪烁三次并熄灭。 至此嗅探数据已经保存到了Flash，后续掉电也不会丢失。 获取嗅探数据下面我们读取嗅探到的数据。将PM3连接到PC，并打开客户端。执行mem spiffs tree,便可以看到保存在Flash中的嗅探数据。 1234[usb] pm3 --&gt; mem spiffs tree[=] --- Flash Memory tree (SPIFFS) -----------------[#] [0008] 10252 B |-- hf_14asniff.trace 执行mem spiffs dump -s hf_14asniff.trace下载到本地。 123[usb] pm3 --&gt; mem spiffs dump -s hf_14asniff.trace[=] downloading 10252 bytes from `hf_14asniff.trace` (spiffs)[+] saved 10252 bytes to binary file hf_14asniff.trace 执行trace load -f hf_14asniff.trace，加载嗅探数据。 123[usb] pm3 --&gt; trace load -f hf_14asniff.trace[+] loaded 10252 bytes from binary file hf_14asniff.trace[+] Recorded Activity (TraceLen = 10252 bytes) 执行trace list -t 14a -1，便可以查看如下所示的嗅探结果。 12345678910111213141516171819202122232425262728293031[usb] pm3 --&gt; trace list -t 14a -1[+] Recorded activity (trace len = 10252 bytes)[=] start = start of start frame end = end of frame. src = source of transfer[=] ISO14443A - all times are in carrier periods (1/13.56MHz) Start | End | Src | Data (! denotes parity error) | CRC | Annotation------------+------------+-----+-------------------------------------------------------------------------+-----+-------------------- 0 | 992 | Rdr |52(7) | | WUPA 79744 | 80736 | Rdr |52(7) | | WUPA...省略 775064448 | 775065504 | Rdr |26(7) | | REQA 775066676 | 775069044 | Tag |04 00 | | 775095920 | 775098384 | Rdr |93 20 | | ANTICOLL 775099556 | 775105380 | Tag |c1 f0 6a 3e 65 | | 775133776 | 775144304 | Rdr |93 70 c1 f0 6a 3e 65 aa 80 | ok | SELECT_UID 775145492 | 775149012 | Tag |28 b4 fc | | 775172288 | 775177056 | Rdr |e0 81 b8 62 | ok | RATS 775189252 | 775210116 | Tag |10 78 80 a0 02 20 90 00 00 00 00 00 c1 f0 6a 3e 85 43 | ok | 775242416 | 775255184 | Rdr |0a 01 00 a4 00 00 02 3f 00 bf eb | ok | 775284852 | 775318388 | Tag |0a 01 6f 15 84 0e 31 50 41 59 2e 53 59 53 2e 44 44 46 | | | | |30 31 a5 03 08 01 01 90 00 b2 6b | ok | 775347872 | 775374464 | Rdr |0b 01 00 a4 04 00 0e 4e 43 2e 65 43 61 72 64 2e 44 44 | | | | |46 30 31 a7 8b | ok | 775432804 | 775432804 | Tag |0b 01 6f 37 84 0e 4e 43 2e 65 43 61 72 64 2e 44 44 46 | | | | |30 31 a5 25 9f 08 01 02 9f 0c 1e 6e 65 77 63 61 70 65 | | | | |63 00 05 aa 00 00 01 88 0a 10 00 1a 34 00 00 00 00 00 | | | | |00 00 00 f8 6f 90 00 d7 28 | ok | 775539856 | 775550320 | Rdr |0a 01 00 b0 95 00 1e fc 42 | ok | 775572820 | 775614420 | Tag |0a 01 6e 65 77 63 61 70 65 63 00 05 aa 00 00 01 88 0a | | | | |10 00 1a 34 00 00 00 00 00 00 00 00 f8 6f 90 00 b7 86 | ok |...省略 需要注意的是，嗅探不是100%可靠稳定的，有时候嗅探数据并不完整或者有错误，需要我们多试几次。 万事俱备至此，已经可以嗅探并查看读卡器与卡片的交互数据，所有的准备工作已经完成。下一篇，将抓取与门禁的数据，并继续工卡的分析。","categories":[{"name":"RFID","slug":"RFID","permalink":"http://blog.raycn.pub/categories/RFID/"}],"tags":[{"name":"proxmark3","slug":"proxmark3","permalink":"http://blog.raycn.pub/tags/proxmark3/"},{"name":"JCOP","slug":"JCOP","permalink":"http://blog.raycn.pub/tags/JCOP/"}]},{"title":"【PM3】对公司新工卡的分析记录（一）——卡片分析","slug":"20210828-employee-badge-analysis-1","date":"2021-08-28T02:21:22.000Z","updated":"2021-08-28T02:21:22.000Z","comments":true,"path":"2021/08/28/20210828-employee-badge-analysis-1/","link":"","permalink":"http://blog.raycn.pub/2021/08/28/20210828-employee-badge-analysis-1/","excerpt":"背景公司近期替换了整个工卡系统，新的工卡系统采用的是一家名为“新开普”公司的解决方案。 新的工卡到手，马上用PM3分析一波，看看相比之前漏洞百出的Mifare Classic卡有什么改进。 卡片分析执行hf 14a info看看是什么类型的卡片。","text":"背景公司近期替换了整个工卡系统，新的工卡系统采用的是一家名为“新开普”公司的解决方案。 新的工卡到手，马上用PM3分析一波，看看相比之前漏洞百出的Mifare Classic卡有什么改进。 卡片分析执行hf 14a info看看是什么类型的卡片。 1234567891011121314151617181920[usb] pm3 --&gt; hf 14a info[+] UID: C1 F0 6A 3E[+] ATQA: 00 04[+] SAK: 28 [1][+] Possible types:[+] SmartMX with MIFARE Classic 1K[=] -------------------------- ATS --------------------------[+] ATS: 10 78 80 A0 02 20 90 00 00 00 00 00 C1 F0 6A 3E [ 43 00 ][=] 10............... TL length is 16 bytes[=] 78............ T0 TA1 is present, TB1 is present, TC1 is present, FSCI is 8 (FSC = 256)[=] 80......... TA1 different divisors are NOT supported, DR: [], DS: [][=] A0...... TB1 SFGI = 0 (SFGT = (not needed) 0/fc), FWI = 10 (FWT = 4194304/fc)[=] 02... TC1 NAD is NOT supported, CID is supported[=] -------------------- Historical bytes --------------------[+] 20900000000000C1F06A3E[+] Prng detection: weak[#] Auth error[?] Hint: try `hf mf` commands 这是一张NXP的SmartMX系列的卡片，同时附带MIFARE Classic 1K模拟。SmartMX是NXP的JCOP卡系列，也就是说这张卡是一种CPU卡（也有叫做Java卡）。CPU卡意味着卡中有一个完整功能的CPU，并且带有操作系统，卡片的功能是基于软件实现的，而不是像MIFAREClassic这种基于ASIC的卡，用硬件电路实现卡片功能。 说了这么多废话，结论就是这种类型的卡相比较MifareClassic类型的卡要安全的多，几乎不可能被破解和复制。 那我们的分析之路已经到了尽头吗？也不一定，安全也是有“木桶效应”的。业务安不安全，并不只有卡片的安全等级决定，卡片安全只是一个因素。之前Mifare也有很多使用默认密码的案例。正好这张卡还带了MIFARE Classic 1K模拟，看看这个模拟MIFARE卡片里面有什么。 尝试DUMP执行hf mf chk看看有没有使用默认/常见密码。 12345678910111213141516171819202122232425262728293031323334353637[usb] pm3 --&gt; hf mf chk --dump[=] No key specified, trying default keys[ 0] ffffffffffff...省略[=] Start check for keys...[=] .................................[=] time in checkkeys 2 seconds[=] testing to read key B...[+] found keys:[+] |-----|----------------|---|----------------|---|[+] | Sec | key A |res| key B |res|[+] |-----|----------------|---|----------------|---|[+] | 000 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 001 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 002 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 003 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 004 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 005 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 006 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 007 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 008 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 009 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 010 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 011 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 012 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 013 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 014 | ffffffffffff | 1 | ffffffffffff | 1 |[+] | 015 | ffffffffffff | 1 | ffffffffffff | 1 |[+] |-----|----------------|---|----------------|---|[+] ( 0:Failed / 1:Success )[+] Generating binary key file[+] Found keys have been dumped to hf-mf-C1F06A3E-key.bin[=] FYI! --&gt; 0xFFFFFFFFFFFF &lt;-- has been inserted for unknown keys where res is 0 看来都是默认密码，那估计也没什么有价值的内容在里面了。 执行hf mf dump尝试dump 123456789101112131415161718[usb] pm3 --&gt; hf mf dump[!] No tag found.[usb] pm3 --&gt; hf mf dump[=] Using `hf-mf-C1F06A3E-key.bin`[=] Reading sector access bits...[=] .................[+] Finished reading sector access bits[=] Dumping all blocks from card...[+] successfully read block 0 of sector 0....省略[+] time: 7 seconds[+] Succeeded in dumping all blocks[+] saved 1024 bytes to binary file hf-mf-C1F06A3E-dump.bin[+] saved 64 blocks to text file hf-mf-C1F06A3E-dump.eml[+] saved to json file hf-mf-C1F06A3E-dump.json dump成功，看看里面有啥。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071[usb] pm3 --&gt; hf mf view -f hf-mf-C1F06A3E-dump.bin[+] loaded 1024 bytes from binary file hf-mf-C1F06A3E-dump.bin[=] ----+-------------------------------------------------+-----------------[=] blk | data | ascii[=] ----+-------------------------------------------------+-----------------[=] 0 | C1 F0 6A 3E 65 28 04 00 00 00 00 00 00 00 00 00 | ..j&gt;e(..........[=] 1 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 2 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 3 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 4 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 5 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 6 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 7 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 8 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 9 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 10 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 11 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 12 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 13 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 14 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 15 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 16 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 17 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 18 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 19 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 20 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 21 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 22 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 23 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 24 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 25 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 26 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 27 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 28 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 29 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 30 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 31 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 32 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 33 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 34 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 35 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 36 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 37 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 38 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 39 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 40 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 41 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 42 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 43 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 44 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 45 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 46 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 47 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 48 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 49 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 50 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 51 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 52 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 53 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 54 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 55 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 56 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 57 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 58 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 59 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] 60 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 61 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 62 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................[=] 63 | FF FF FF FF FF FF FF 07 80 69 FF FF FF FF FF FF | .........i......[=] ----+-------------------------------------------------+----------------- 果然不出所料，啥也没有。那单纯针对卡片的分析也就到此为止了，还需要收集其他信息才能更进一步了。","categories":[{"name":"RFID","slug":"RFID","permalink":"http://blog.raycn.pub/categories/RFID/"}],"tags":[{"name":"proxmark3","slug":"proxmark3","permalink":"http://blog.raycn.pub/tags/proxmark3/"},{"name":"JCOP","slug":"JCOP","permalink":"http://blog.raycn.pub/tags/JCOP/"}]},{"title":"【PM3】重置小米空气净化器滤芯","slug":"reset-xiaomi-air-purifier-filters","date":"2021-08-21T01:07:45.000Z","updated":"2021-08-21T01:07:45.000Z","comments":true,"path":"2021/08/21/reset-xiaomi-air-purifier-filters/","link":"","permalink":"http://blog.raycn.pub/2021/08/21/reset-xiaomi-air-purifier-filters/","excerpt":"背景家里小米空气净化器的滤芯又到期了，然而深圳这边空气质量平时就不错，应该还可以用很久。但是恼人的过期提示令我非常不爽，得想办法干掉这个提示。 根据网上的资料，小米空气净化器2S是依赖滤芯底部的RFID标签计算滤芯寿命的，正好手头有一块RFID的利器-Proxmark3。尝试下能否读取和修改RFID标签中的数据，来实现滤芯寿命的重置。 识别标签类型","text":"背景家里小米空气净化器的滤芯又到期了，然而深圳这边空气质量平时就不错，应该还可以用很久。但是恼人的过期提示令我非常不爽，得想办法干掉这个提示。 根据网上的资料，小米空气净化器2S是依赖滤芯底部的RFID标签计算滤芯寿命的，正好手头有一块RFID的利器-Proxmark3。尝试下能否读取和修改RFID标签中的数据，来实现滤芯寿命的重置。 识别标签类型 尝试使用hf search看下是什么类型的标签。 12345678910111213[fpc] pm3 --&gt; hf search 🕕 Searching for ISO14443-A tag...[+] UID: 53 5C 4D EE 02 1F 00[+] ATQA: 00 44[+] SAK: 00 [2][+] MANUFACTURER: Shanghai Feiju Microelectronics Co. Ltd. China[+] TYPE: NTAG 213 144bytes (NT2H1311G0DU)[+] MIFARE Ultralight/C/NTAG Compatible[=] proprietary non iso14443-4 card found, RATS not supported[?] Hint: try `hf mfu info`[+] Valid ISO 14443-A tag found 如结果所示，这是个NTAG标签，然后按提示执行hf mfu info看下进一步的信息 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253[fpc] pm3 --&gt; hf mfu info[=] --- Tag Information --------------------------[=] -------------------------------------------------------------[+] TYPE: NTAG 213 144bytes (NT2H1311G0DU)[+] UID: 53 5C 4D EE 02 1F 00[+] UID[0]: 53, Shanghai Feiju Microelectronics Co. Ltd. China[+] BCC0: CA (ok)[+] BCC1: F3 (ok)[+] Internal: 48 (default)[+] Lock: 00 00 - 00[+] OneTimePad: E1 10 12 00 - @B0[=] --- NDEF Message[+] Capability Container: E1 10 12 00[+] E1: NDEF Magic Number[+] 10: version 0.1 supported by tag[+] : Read access granted without any security / Write access granted without any security[+] 12: Physical Memory Size: 144 bytes[+] 12: NDEF Memory Size: 144 bytes[+] Additional feature information[+] 00[+] 00000000[+] xxx - 00: RFU (ok)[+] x - 00: don&#x27;t support special frame[+] x - 00: don&#x27;t support lock block[+] xx - 00: RFU (ok)[+] x - 00: IC don&#x27;t support multiple block reads[=] --- Tag Counter[=] [02]: 00 00 00[+] - 00 tearing ( fail )[=] --- Tag Signature[=] Elliptic curve parameters: NID_secp128r1[=] TAG IC Signature: 0000000000000000000000000000000000000000000000000000000000000000[+] Signature verification ( fail )[=] --- Tag Version[=] Raw bytes: 00 53 04 02 01 00 0F 03[=] Vendor ID: 53, Shanghai Feiju Microelectronics Co. Ltd. China[=] Product type: 04, NTAG[=] Product subtype: 02, 50pF[=] Major version: 01[=] Minor version: 00[=] Size: 0F, (256 &lt;-&gt; 128 bytes)[=] Protocol type: 03, ISO14443-3 Compliant[?] Hint: try `hf mfu pwdgen -r` to get see known pwd gen algo suggestions[=] ------------------------ Fingerprint -----------------------[=] Reading tag memory...[#] Cmd Error: 00[#] Read block 4 error[=] ------------------------------------------------------------ 这个不是NXP官方产的NTAG，应该是国内一家叫做上海飞聚生产的NTAG兼容标签。 从输出结果可以看到，这个标签是有密码的，提示执行hf mfu pwdgen -r计算密码。但是我们不用这么麻烦，既然有PM3这种神器，可以直接通过sniff嗅探出NTAG密码。另外实际上我也测试过了，计算出来的密码都不对的。 嗅探标签密码ok，话不多说，执行hf 14a sniff进入嗅探模式。不过由于标签在滤芯底部，没有空间把PM3塞进去，直接放在滤芯的桶里就好了，这个距离也是够的。然后把滤芯放回净化器并启动。为了保证效果，可以多试几次。 1234[fpc] pm3 --&gt; hf 14a sniff[#] Starting to sniff. Press PM3 Button to stop.[#] trace len = 606 可以看到已经嗅探到数据了，执行trace list -t 14a看下嗅探的结果 12345678910111213141516171819202122232425[fpc] pm3 --&gt; hf 14a sniff[#] Starting to sniff. Press PM3 Button to stop.[#] trace len = 606[fpc] pm3 --&gt; trace list -t 14a[=] downloading tracelog data from device[+] Recorded activity (trace len = 606 bytes)[=] start = start of start frame end = end of frame. src = source of transfer[=] ISO14443A - all times are in carrier periods (1/13.56MHz) Start | End | Src | Data (! denotes parity error) | CRC | Annotation------------+------------+-----+-------------------------------------------------------------------------+-----+-------------------- 0 | 1056 | Rdr |26(7) | | REQA 419248 | 421712 | Rdr |93 20 | | ANTICOLL 838544 | 849072 | Rdr |93 70 88 53 5c 4d ca 3a 40 | ok | SELECT_UID 1284848 | 1287312 | Rdr |95 20 | | ANTICOLL-2 1704144 | 1714672 | Rdr |95 70 ee 02 1f 00 f3 3f f8 | ok | SELECT_UID-2 2109856 | 2118080 | Rdr |1b bc 77 b6 ed da 5b | ok | PWD-AUTH KEY: 0xbc77b6ed 2515568 | 2520272 | Rdr |30 04 26 ee | ok | READBLOCK(4) 2521520 | 2538512 | Rdr |ff! ff! b7! b4! ff! ff! ce! cc! ff! de! fc! fa! ff! f9! 2b! | !crc| 2934816 | 2939520 | Rdr |30 05 af ff | ok | READBLOCK(5) 3354032 | 3358800 | Rdr |30 06 34 cd | ok | READBLOCK(6).... 省略部分 3773328 | 3778096 | Rdr |30 07 bd dc | ok | READBLOCK(7) 4192560 | 4197264 | Rdr |30 08 4a 24 | ok | READBLOCK(8) 注意，嗅探完成必须要通过按钮终止嗅探，否则PM3会卡死。给开发者提过这个问题，但是答复说是设计如此，是个Feature。 啊哈哈，已经可以看到密码了，即0xbc77b6ed。同时我们也可以注意到，块（BLOCK）4、5、6、7、8被读取过。 DUMP标签下一步先把这几个BLOCK或者将整个标签的数据dump下来。这里我们直接用刚才的密码，执行hf mfu dump -k bc77b6ed把整个标签dump下来。 123456789101112131415161718192021222324252627282930313233343536373839[fpc] pm3 --&gt; hf mfu dump -k bc77b6ed[+] TYPE: NTAG 213 144bytes (NT2H1311G0DU)[+] Reading tag memory...[=] MFU dump file information[=] -------------------------------------------------------------[=] Version | 00 53 04 02 01 00 0F 03[=] TBD 0 | 00 00[=] TBD 1 | 00[=] Signature | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[=] Counter 0 | 00 00 00[=] Tearing 0 | 00[=] Counter 1 | 00 00 00[=] Tearing 1 | 00[=] Counter 2 | 00 00 00[=] Tearing 2 | 00[=] Max data page | 43 (176 bytes)[=] Header size | 56[=] -------------------------------------------------------------[=] block# | data |lck| ascii[=] ---------+-------------+---+------[=] 0/0x00 | 53 5C 4D CA | | S\\M.[=] 1/0x01 | EE 02 1F 00 | | ....[=] 2/0x02 | F3 48 00 00 | | .H..[=] 3/0x03 | E1 10 12 00 | 0 | ....[=] 4/0x04 | 00 00 48 4B | 0 | ..HK[=] 5/0x05 | 00 00 31 33 | 0 | ..13[=] 6/0x06 | 00 21 03 05 | 0 | .!..[=] 7/0x07 | 00 06 14 77 | 0 | ...w[=] 8/0x08 | D6 DD 09 00 | 0 | ........ 省略没数据的部分[=] 40/0x28 | 00 00 00 BD | 0 | ....[=] 41/0x29 | 04 00 00 04 | 0 | ....[=] 42/0x2A | C0 05 00 00 | 0 | ....[=] 43/0x2B | 00 00 00 00 | 0 | ....[=] 44/0x2C | 00 00 00 00 | 0 | ....[=] ---------------------------------[=] Using UID as filename[+] saved 236 bytes to binary file hf-mfu-535C4DEE021F00-dump.bin[+] saved to json file hf-mfu-535C4DEE021F00-dump.json dump成功，下一步就简单了， 有几种方式： 把滤芯放回去继续使用。然后用到期后再将这几个BLOCK刷回去，即可把滤芯恢复到保存的时候的状态。 将滤芯回去使用一段时间后，再dump一次，观察哪些BLOCK发生了变化，分析规律或者找个新滤芯对比下。知道算法之后就可以直接将滤芯寿命修改为指定的值了 重置滤芯寿命实际上这里只要把BLOCK 8清空掉就可以重置滤芯。执行hf mfu wrbl -b 8 -d 00000000 -k bc77b6ed清除BLOCK 8的数据。 1234[fpc] pm3 --&gt; hf mfu wrbl -b 8 -d 00000000 -k bc77b6ed[=] Block: 8 (0x08) [ 00 00 00 00 ][=] Using pwd BC 77 B6 ED[+] isOk:01 清除完成功，可以把滤芯放回去看下效果。搞定！","categories":[{"name":"RFID","slug":"RFID","permalink":"http://blog.raycn.pub/categories/RFID/"}],"tags":[{"name":"proxmark3","slug":"proxmark3","permalink":"http://blog.raycn.pub/tags/proxmark3/"}]},{"title":"Git如何合入上游仓库的分支","slug":"git-merge-upstream","date":"2020-02-06T12:03:45.000Z","updated":"2020-02-06T12:03:45.000Z","comments":true,"path":"2020/02/06/git-merge-upstream/","link":"","permalink":"http://blog.raycn.pub/2020/02/06/git-merge-upstream/","excerpt":"背景github上的开源项目有时无法完全满足自己需要，或者项目本身存在BUG，但是等不到开发者去修复。这时候我们往往会选择fork，然后自行修改或使用。但是一段时间后，原项目开发者可能会更新项目，追加新的功能或者修复已知BUG。这时，为了避免与上游脱节，我们需要将上游仓库合入到我们fork的仓库中。","text":"背景github上的开源项目有时无法完全满足自己需要，或者项目本身存在BUG，但是等不到开发者去修复。这时候我们往往会选择fork，然后自行修改或使用。但是一段时间后，原项目开发者可能会更新项目，追加新的功能或者修复已知BUG。这时，为了避免与上游脱节，我们需要将上游仓库合入到我们fork的仓库中。 操作步骤这里以本blog的主题（theme）为例，我fork了原作者的仓库，并在其基础上做了些个性化的改动，这些改动作者肯定不会合入的。但是近期原作者做了一些更新，加入的新的功能，因此我要将最新的版本合入到我自己的仓库中。详细操作步骤如下： 将要自己的仓库克隆（clone）到本地1git clone https://github.com/AxisRay/hexo-theme-material-flow.git 添加要合入的上游仓库1git remote add upstream https://github.com/stkevintan/hexo-theme-material-flow.git 拉取（pull）上游仓库1git fetch upstream 创建并切换到新的本地分支（branch），并将其连接到上游仓库要合入的分支1git checkout -b upm upstream/master 切换到自己仓库要合入的分支，并将上述新分支合入12git checkout mastergit merge upm 最后将自己仓库更新（push）上去即可1git push origin master","categories":[{"name":"git","slug":"git","permalink":"http://blog.raycn.pub/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://blog.raycn.pub/tags/git/"}]},{"title":"解决jenkins没有权限调用Docker的问题","slug":"jenkins-docker-permission-problem","date":"2017-06-17T14:23:33.000Z","updated":"2017-06-17T14:23:33.000Z","comments":true,"path":"2017/06/17/jenkins-docker-permission-problem/","link":"","permalink":"http://blog.raycn.pub/2017/06/17/jenkins-docker-permission-problem/","excerpt":"jenkins在构建步骤中调用docker提示如下错误。 dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS?","text":"jenkins在构建步骤中调用docker提示如下错误。 dial unix /var/run/docker.sock: permission denied. Are you trying to connect to a TLS-enabled daemon without TLS? 明显这是因为权限问题导致，参考stackoverflow上的解决方案，将Jenkins用户添加到docker组中，重启docker服务即可。 1sudo usermod -a -G docker $username 但是或许是由于docker或者系统版本比较老，没有所谓的docker组，只有dockerroot组。将jenkins添加到dockerroot组后仍然提示权限不足。直接让jenkins以root身份运行也不安全，于是考虑使用sudo曲线救国。 编辑sudoers文件1visudo 添加命令别名123## DockerCmnd_Alias DOCKER = /usr/bin/docker 给jenkins以sudo权限1jenkins ALL=(ALL) NOPASSWD:DOCKER :wq保存退出，调整jenkins构建步骤，增加sudo 123456716:09:36 Sending build context to Docker daemon 148 kB16:09:36 Sending build context to Docker daemon 16:09:36 Step 0 : FROM microsoft/dotnet16:09:36 ---&gt; 2c9e30c8fccd16:09:36 Step 1 : WORKDIR /app16:09:36 ---&gt; Running in 3c50062d5f6d16:09:40 ---&gt; 3d22684a6579 至此问题解决，不过这样还是后有些安全隐患，后续再考虑优化吧。","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/categories/linux/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.raycn.pub/tags/docker/"},{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/tags/linux/"},{"name":"jenkins","slug":"jenkins","permalink":"http://blog.raycn.pub/tags/jenkins/"}]},{"title":"Bash变量操作实验-变量的测试和内容替换","slug":"linux-set-var","date":"2015-01-29T02:15:21.000Z","updated":"2015-01-29T02:15:21.000Z","comments":true,"path":"2015/01/29/linux-set-var/","link":"","permalink":"http://blog.raycn.pub/2015/01/29/linux-set-var/","excerpt":"前言某些时候，我们在给变量赋值之前要对__某个__变量进行__判断__,根据结果来决定我们下一步的赋值操作，下面演示下几种判断的方式。","text":"前言某些时候，我们在给变量赋值之前要对__某个__变量进行__判断__,根据结果来决定我们下一步的赋值操作，下面演示下几种判断的方式。 实验准备1234$ var_value=&quot;test&quot;$ var_empty=&quot;&quot;$ unset var_null$ result=&quot;hello&quot; 先创建4个变量（实际上是3个，因为var_null不存在）。var_value值为testvar_empty值为空字符var_null不存在，用unset确保它不存在result用来保存结果，先赋个初值hello 实验1、“-”操作符1234567891011$ echo $resulthello$ result=$&#123;var_value-default&#125;$ echo $resulttest$ result=$&#123;var_empty-default&#125;$ echo $result$ result=$&#123;var_null-default&#125;$ echo $resultdefault 因为$var_value存在，所以$result的值被替换成$var_value的值，即test虽然$var_value为空字符，但也视为变量存在，因此$result的值被替换为$var_empty的值，即空字符因为$var_null不存在，所以$result的值被替换为默认值default 要把空字符也视为变量不存在，则需要”:”操作符 Tips需要注意的是，绝大多数情况下，Bash并不区分空变量和空字符变量,但是此处会做区分。而“：”操作符会取消他们之间的差异。详情可点击这里查看 12345$ echo $resulthello$ result=$&#123;var_empty:-default&#125;$ echo $resultdefault 实验2、“+”操作符“+”基本上和“-”是完全相反的，而“：”则会和刚才一样把空字符变量和空变量一视同仁 1234567891011121314$ echo $resulthello$ result=$&#123;var_value+default&#125;$ echo $resultdefault$ result=$&#123;var_empty+default&#125;$ echo $resultdefault$ result=$&#123;var_null+default&#125;$ echo $result$ result=$&#123;var_empty:+default&#125;$ echo $result 实验3、“=”操作符“=”操作符的规则基本和“-”一致，但是替换时会把两个变量一同替换。而“：”操作符会把空字符变量和空变量一视同仁。 1234567891011121314151617181920$ echo $resulthello$ result=$&#123;var_value=default&#125;$ echo $resulttest$ echo $var_valuetest$ result=$&#123;var_empty=default&#125;$ echo $result$ echo $var_value$ result=$&#123;var_null=default&#125;$ echo $resultdefault$ echo $var_nulldefault$ result=$&#123;var_empty:+default&#125;$ echo $result 实验4、“?”操作符“?”操作符与“-”的差异是，当被检查的变量为空时，会将默认字符送入标准错误流，而不是赋值给变量。 12345678910111213141516$ echo $resulthello$ result=$&#123;var_value?default&#125;$ echo $resulthello$ result=$&#123;var_empty?default&#125;$ echo $result$ result=$&#123;var_null?default&#125;bash: var_null: default$ echo $result$ result=$&#123;var_empty:?default&#125;bash: var_null: default$ echo $result","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/tags/linux/"},{"name":"bash","slug":"bash","permalink":"http://blog.raycn.pub/tags/bash/"}]},{"title":"tmux使用笔记","slug":"tmux-intruduction","date":"2015-01-28T04:33:42.000Z","updated":"2015-01-28T04:33:42.000Z","comments":true,"path":"2015/01/28/tmux-intruduction/","link":"","permalink":"http://blog.raycn.pub/2015/01/28/tmux-intruduction/","excerpt":"tmux简介tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。tmux采用C/S模型构建，包含以下模块Server，Session，Window，Panel","text":"tmux简介tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。tmux采用C/S模型构建，包含以下模块Server，Session，Window，Panel 安装使用1$ apt-get install tmux 终端中键入tmux,首先会启动Server,然后就创建一个Session，这个Session会创建一个Window，仅包含一个Panel。 tmux new -s sessiontmux new -s session -d #在后台建立会话tmux ls #列出会话tmux attach -t session #进入某个会话 Server 服务器第一次键入tmux启动的时候就开启了一个服务器Server，通过这个服务器甚至可以实现终端共享。 Session 会话每使用tmux命令启动，便会建立一个会话Session，一个服务器可以保持多个会话连接，同时我们也可以在多个会话之间切换。 Window 窗口一个Session可包含多个窗口Window，每个窗口都以标签的形式显示在Session下面的状态栏里 Panel 面板每个窗口可以划分多个Panel，实现分屏显示 操作说明Ctrl+b (C-b) 是激活tmux控制台的默认快捷键，以下的控制命令都要先键入Ctrl+b激活控制台。 1、系统操作 ? 列出所有快捷键；按q返回 d 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话 D 选择要脱离的会话；在同时开启了多个会话时使用 s 选择并切换会话；在同时开启了多个会话时使用 : 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器 [ 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出 ~ 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息 C-z 挂起当前会话 2、窗口操作c 创建新窗口&amp; 关闭当前窗口p 切换至上一窗口n 切换至下一窗口l 在前后两个窗口间互相切换w 通过窗口列表切换窗口, 重命名当前窗口；这样便于识别. 修改当前窗口编号；相当于窗口重新排序f 在所有窗口中查找指定文本数字 切换至制定窗口 3、面板操作” 将当前面板平分为上下两块% 将当前面板平分为左右两块x 关闭当前面板! 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板q 显示面板编号o 在当前窗口中选择下一面板{ 向前置换当前面板} 向后置换当前面板Alt+o 逆时针旋转当前窗口的面板Alt+方向键 以5个单元格为单位移动边缘以调整当前面板大小Ctrl+o 顺时针旋转当前窗口的面板方向键 移动光标以选择面板Ctrl+方向键 以1个单元格为单位移动边缘以调整当前面板大小Space 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/tags/linux/"},{"name":"tmux","slug":"tmux","permalink":"http://blog.raycn.pub/tags/tmux/"}]},{"title":"Ubuntu下修改Bash的提示符","slug":"ubuntu-change-bash-prompt","date":"2015-01-27T14:23:33.000Z","updated":"2015-01-27T14:23:33.000Z","comments":true,"path":"2015/01/27/ubuntu-change-bash-prompt/","link":"","permalink":"http://blog.raycn.pub/2015/01/27/ubuntu-change-bash-prompt/","excerpt":"Bash的提示符设置保存在$PS1这个变量中，通过echo命令可以查看当前设置 12ray@Ray-Laptop:~$ echo $PS1$&#123;debian_chroot:+($debian_chroot)&#125;\\u@\\h:\\w\\$","text":"Bash的提示符设置保存在$PS1这个变量中，通过echo命令可以查看当前设置 12ray@Ray-Laptop:~$ echo $PS1$&#123;debian_chroot:+($debian_chroot)&#125;\\u@\\h:\\w\\$ 默认的一些特殊符号所代表的含义：\\d ：代表日期，格式为weekday month date，例如：”Mon Aug 1”\\H ：完整的主机名称。例如：我的机器名称为：Ray-Laptop.local，则这个名称就是Ray-Laptop.local\\h ：仅取主机的第一个名字，如上例，则为Ray-Laptop，local则被省略\\t ：显示时间为24小时格式，如：HH：MM：SS\\T ：显示时间为12小时格式\\A ：显示时间为24小时格式：HH：MM\\u ：当前用户的账号名称\\v ：BASH的版本信息\\w ：完整的工作目录名称。家目录会以 ~代替\\W ：利用basename取得工作目录名称，所以只会列出最后一个目录\\# ：下达的第几个命令$ ：提示字符，如果是root时，提示符为：# ，普通用户则为：$ 我们可以通过修改提示符方法解决进入较深目录时，提示符过长的问题： 1PS1=$&#123;debian_chroot:+($debian_chroot)&#125;\\u@\\h:\\W\\$ 即将原来的\\w替换为\\W，但是该方法仅在本次会话有效。我们可通过修改用户根目录～下的.bashrc文件，达到长期有效的目的。 修改前：修改后：","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/tags/linux/"},{"name":"bash","slug":"bash","permalink":"http://blog.raycn.pub/tags/bash/"},{"name":"prompt","slug":"prompt","permalink":"http://blog.raycn.pub/tags/prompt/"}]},{"title":"linux文件及目录权限笔记","slug":"linux-dir-and-file-permission","date":"2015-01-04T06:44:36.000Z","updated":"2015-01-04T06:44:36.000Z","comments":true,"path":"2015/01/04/linux-dir-and-file-permission/","link":"","permalink":"http://blog.raycn.pub/2015/01/04/linux-dir-and-file-permission/","excerpt":"文件权限权限分三种，读（r）写（w）可执行（x）。“r–”、“rw-”、“rwx”这三种权限组合没什么好说的。“r–”只读，“rw-”可读可写，“rwx”可读可写可执行，下面介绍几种比较另类权限组合。","text":"文件权限权限分三种，读（r）写（w）可执行（x）。“r–”、“rw-”、“rwx”这三种权限组合没什么好说的。“r–”只读，“rw-”可读可写，“rwx”可读可写可执行，下面介绍几种比较另类权限组合。 -w-、-wx：只写权限，只能写入不能读取。 12345678-rw-rw--w- 1 root root 5 Jan 4 12:00 testfile/tmp$ cat testfilecat: testfile: Permission denied/tmp$ echo &quot;write-test&quot;&gt;testfile/tmp$ su rootPassword: root@axisray:/tmp# cat testfile write-test –x、-wx：虽然有执行权限，但是由于没有读权限，连文件内容都不知道谈何执行呢？ 1234567891011-rw-rw---x 1 root root 26 Jan 4 12:53 testfile*/tmp$ ./testfile /bin/bash: ./testfile: Permission denied/tmp$ su rootPassword: root@axisray:/tmp# chmod o=rx testfileroot@axisray:/tmp$ ll | grep testfile-rw-rw-r-x 1 root root 26 Jan 4 12:53 testfile*root@axisray:/tmp# su ray/tmp$ ./testfile hello! 目录权限目录权限的关键在于可执行权限（x），下面逐个说明 r–、rw-、-w-：无可执行drwxr-xr– 4 root root 4096 Jan 4 11:53 test/ cd命令需要可执行（x）权限，因此无法通过cd命令切换到该目录下 12/tmp$ cd test/bash: cd: test/: Permission denied 子目录也是不可切换的，即便对子目录有完整权限 12/tmp$ cd test/test-dir1/bash: cd: test/test-dir1/: Permission denied 同样对于cat命令，由于缺少可执行（x）权限，该目录下的文件也是不可读的。 12/tmp$ cat test/test-file2cat: test/test-file2: Permission denied cp命令也是不可以的 12/tmp$ cp test/test-file2 ./cp: cannot stat ‘test/test-file2’: Permission denied 若该目录权限为rw-或-w-即有写入权限，由于缺少可执行（x）权限，也无法用mkdir等命令创建文件或目录 1234/tmp$ mkdir test/testdirmkdir: cannot create directory ‘test/testdir’: Permission denied/tmp$ cp testfile ./test/cp: cannot stat ‘./test/testfile’: Permission denied 同样即使该目录下的文件可读可执行，也无法执行该目录下的文件 12/tmp$ ./test/test-file2bash: ./test/test-file2: Permission denied ll命令虽然可以列出该目录下的文件及目录，但是同样因为可执行（x）权限无法查看属性 1234567891011121314/tmp$ ll testls: cannot access test/..: Permission deniedls: cannot access test/.: Permission deniedls: cannot access test/test-file2: Permission deniedls: cannot access test/test-dir2: Permission deniedls: cannot access test/test-dir1: Permission deniedls: cannot access test/test-file1: Permission deniedtotal 0d????????? ? ? ? ? ? ./d????????? ? ? ? ? ? ../d????????? ? ? ? ? ? test-dir1/d????????? ? ? ? ? ? test-dir2/-????????? ? ? ? ? ? test-file1-????????? ? ? ? ? ? test-file2 对子目录来说，无法列出文件及目录，即便有完整权限 12/tmp$ ll test/test-dir1/ls: cannot access test/test-dir1/: Permission denied –x、-wx、rwx、r-x：有可执行权限drwxr-x–x 4 root root 4096 Jan 4 13:15 test/ 使用cp命令可以正常切换至该目录 12/tmp$ cd test//tmp/test$ 但是无法使用ll列出该目录下的文件及目录，因为没有读权限（r） 12/tmp/test$ llls: cannot open directory .: Permission denied 子目录不受影响，只要有相应权限 12345/tmp/test$ ll test-dir1total 12drwxr-xrwx 2 root root 4096 Jan 4 13:27 ./drwxr-x--x 4 root root 4096 Jan 4 13:15 ../-rw-r--r-- 1 root root 9 Jan 4 13:27 test-file3 可使用cat查看目录下的文件，只要有相应文件的读权限 123/tmp/test$ cat test-file2#!/bin/bashecho &quot;hello!&quot; 也可以使用cp拷贝该目录下的文件，只要有相应文件的读权限 1234/tmp/test$ cp test-file2 ..//tmp/test$ cd ../tmp$ ll | grep test-file-rw-r--r-x 1 ray ray 26 Jan 4 13:43 test-file2* 也可以执行该目录下的文件，只要有相应文件的读和可执行权限 12/tmp$ ./test/test-file2hello! 如果该目录权限为-wx或rwx即有写入权限我们就可以用mkdir、cp等命令在该目录创建子目录或文件 123456789101112/tmp$ mkdir test/testdir/tmp$ cp testfile test//tmp$ su rootPassword: root@axisray:/tmp# ll test/total 24drwxrwxr-x 2 ray ray 4096 Jan 4 14:29 testdir/drwxr-xrwx 2 root root 4096 Jan 4 13:27 test-dir1/drwxr-xrw- 2 root root 4096 Jan 4 13:15 test-dir2/-rw-rw-r-x 1 ray ray 26 Jan 4 14:29 testfile*-rw-r----- 1 root root 11 Jan 4 13:15 test-file1-rw-r--r-x 1 root root 26 Jan 4 13:15 test-file2* 如果该目录权限为r-x或rwx即有读取权限我们可以用ll列出当前目录的子目录及文件 123456789101112root@axisray:/tmp# chmod o=rx testroot@axisray:/tmp# su ray/tmp$ ll testtotal 32drwxr-xr-x 5 root root 4096 Jan 4 14:29 ./drwxrwxrwt 4 root root 4096 Jan 4 14:42 ../drwxrwxr-x 2 ray ray 4096 Jan 4 14:29 testdir/drwxr-xrwx 2 root root 4096 Jan 4 13:27 test-dir1/drwxr-xrw- 2 root root 4096 Jan 4 13:15 test-dir2/-rw-rw-r-x 1 ray ray 26 Jan 4 14:29 testfile*-rw-r----- 1 root root 11 Jan 4 13:15 test-file1-rw-r--r-x 1 root root 26 Jan 4 13:15 test-file2* 总结 对于文件权限，可读权限（r）是可执行（x）的基础 对于目录权限，可执行（x）权限是关键，没有可执行权限意味着所有命令都不能在该目录及子目录下执行，该目录及子目录下的文件也不能被执行。这意味着我们常用的命令cd、ls、mkdir、cp、mv、rm等等在该目录下全部失效","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/tags/linux/"},{"name":"bash","slug":"bash","permalink":"http://blog.raycn.pub/tags/bash/"}]},{"title":"解决TortoiseSVN/Git覆盖图标失效的问题","slug":"tortoise-icon-problem","date":"2014-12-09T12:38:23.000Z","updated":"2014-12-09T12:38:23.000Z","comments":true,"path":"2014/12/09/tortoise-icon-problem/","link":"","permalink":"http://blog.raycn.pub/2014/12/09/tortoise-icon-problem/","excerpt":"最近发现TortoiseGit的覆盖图标不见了，从版本库里clone下来的源码没有了已同步，已修改之类的图标提示。下面给出解决办法：（感谢woyaowenzi）","text":"最近发现TortoiseGit的覆盖图标不见了，从版本库里clone下来的源码没有了已同步，已修改之类的图标提示。下面给出解决办法：（感谢woyaowenzi） Windows最多允许15个覆盖图标，系统占用了约4个，用户可用的只有11个左右。TortoiseSVN或者TortoiseGit标准会占用7个覆盖图标，分别为：普通图标、已修改图标、冲突指示图标、已删除图标、新增文件图标、忽略图标、未版本化图标而每个网盘类的客户端又会占用3个左右。所有应用程序的覆盖图标都需要在注册表 1HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellIconOverlayIdentifiers 下面增加一个项目，当需要显示覆盖图标时，Windows会按照项目名称的字母顺利依次查询在这些项目里所指示的接口，以检测是否有覆盖图标，当检测到11个有效的接口后，Windows就会自动停止继续向下检测，这样，后来的覆盖图标就不会显示了。 __解决方法__：把其他网盘类的覆盖图标注册表项删除，让TortoiseSVN/Git的注册表项提前","categories":[{"name":"git","slug":"git","permalink":"http://blog.raycn.pub/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://blog.raycn.pub/tags/git/"},{"name":"tortoise","slug":"tortoise","permalink":"http://blog.raycn.pub/tags/tortoise/"}]},{"title":"解决ubuntu下phpmyadmin缺少mcrypt扩展的错误","slug":"php-mod-mcrypt","date":"2014-12-06T13:08:46.000Z","updated":"2014-12-06T13:08:46.000Z","comments":true,"path":"2014/12/06/php-mod-mcrypt/","link":"","permalink":"http://blog.raycn.pub/2014/12/06/php-mod-mcrypt/","excerpt":"","text":"在ubuntu用apt-get安装phpmyadmin后，总会出现如下错误解决方法很简单，使用如下命令启用mcrypt组件 1$ php5enmod mcrypt","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/categories/linux/"}],"tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.raycn.pub/tags/ubuntu/"},{"name":"phpmyadmin","slug":"phpmyadmin","permalink":"http://blog.raycn.pub/tags/phpmyadmin/"}]},{"title":"从光盘或镜像中安装.NetFramework","slug":"install-netfx3-from-sysimg","date":"2014-12-05T03:55:12.000Z","updated":"2014-12-05T03:55:12.000Z","comments":true,"path":"2014/12/05/install-netfx3-from-sysimg/","link":"","permalink":"http://blog.raycn.pub/2014/12/05/install-netfx3-from-sysimg/","excerpt":"","text":"windows8预装了.Net Framework4.0，但是4.0并不会向下兼容使用更早.Net版本编写的程序。当我们运行一个使用更早版本编写的.Net程序时，Windows会自动帮我们下载并安装.Net Framework3.5。但是当遇到没有网络或者网速比较慢的时候就比较难受了。所以我们可以选择从Windows8光盘或者镜像安装.假设光盘或光盘镜像的盘符为X，在命令提示符中输入 1DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /LimitAccess /Source:X:\\sources\\sxs","categories":[{"name":"windows","slug":"windows","permalink":"http://blog.raycn.pub/categories/windows/"}],"tags":[{"name":"dotnet","slug":"dotnet","permalink":"http://blog.raycn.pub/tags/dotnet/"}]}],"categories":[{"name":"RFID","slug":"RFID","permalink":"http://blog.raycn.pub/categories/RFID/"},{"name":"git","slug":"git","permalink":"http://blog.raycn.pub/categories/git/"},{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/categories/linux/"},{"name":"windows","slug":"windows","permalink":"http://blog.raycn.pub/categories/windows/"}],"tags":[{"name":"proxmark3","slug":"proxmark3","permalink":"http://blog.raycn.pub/tags/proxmark3/"},{"name":"JCOP","slug":"JCOP","permalink":"http://blog.raycn.pub/tags/JCOP/"},{"name":"git","slug":"git","permalink":"http://blog.raycn.pub/tags/git/"},{"name":"docker","slug":"docker","permalink":"http://blog.raycn.pub/tags/docker/"},{"name":"linux","slug":"linux","permalink":"http://blog.raycn.pub/tags/linux/"},{"name":"jenkins","slug":"jenkins","permalink":"http://blog.raycn.pub/tags/jenkins/"},{"name":"bash","slug":"bash","permalink":"http://blog.raycn.pub/tags/bash/"},{"name":"tmux","slug":"tmux","permalink":"http://blog.raycn.pub/tags/tmux/"},{"name":"prompt","slug":"prompt","permalink":"http://blog.raycn.pub/tags/prompt/"},{"name":"tortoise","slug":"tortoise","permalink":"http://blog.raycn.pub/tags/tortoise/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://blog.raycn.pub/tags/ubuntu/"},{"name":"phpmyadmin","slug":"phpmyadmin","permalink":"http://blog.raycn.pub/tags/phpmyadmin/"},{"name":"dotnet","slug":"dotnet","permalink":"http://blog.raycn.pub/tags/dotnet/"}]}